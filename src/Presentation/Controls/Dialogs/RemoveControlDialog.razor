@using Presentation.Utils;
@using Presentation.Shared.Dialogs;

@inject IStringLocalizer<RemoveControlDialog> _localizer;
@inject IControlService _controlService;

@inherits BaseDialog

<MudDialog ClassContent="my-mud-dialog-content">
    <DialogContent>
        <LoadingDialog>
            <Title>
                <MudText Align="Align.Start"
                         Class="m-0 mt-2 mb-2"
                         Typo="Typo.h6">
                    @_localizer["Remove Control"]
                </MudText>
            </Title>
            <Content>
                <MudGrid Class="m-0 p-2 pt-0 pb-0 w-100">
                    <MudText>@_localizer["Are you sure you want to remove following control?"]</MudText>
                </MudGrid>
            </Content>
            <Actions>
                <MudButton OnClick="Cancel">
                    @_localizer["Cancel"]
                </MudButton>
                <MudButton OnClick="RemoveAsync"
                           Variant="Variant.Filled"
                           Color="Color.Error">
                    @_localizer["Remove"]
                </MudButton>
            </Actions>
        </LoadingDialog>
    </DialogContent>
</MudDialog>

@code
{
    [Parameter]
    public Control Control { get; set; } = new();
    [Parameter]
    public string DeviceId { get; set; } = string.Empty;
    [Parameter]
    public string ClientId { get; set; } = string.Empty;

    protected async Task RemoveAsync()
    {
        var result = await _loadingService.InvokeDialogAsync(RemoveAction);

        if (result.Succeeded)
            Dialog!.Close(DialogResult.Ok(result));
    }

    private async Task<IResult> RemoveAction()
    {
        if (string.IsNullOrEmpty(DeviceId) || string.IsNullOrEmpty(ClientId))
            return Result.Fail();

        var result = await _controlService.RemoveControl(ClientId, Control);

        RequestHelpers.InvokeAfterRequest(_snackbar, result, _localizer["Successfully removed device."]);

        return result;
    }
}
