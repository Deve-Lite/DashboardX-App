@using Presentation.Utils;
@inject IStringLocalizer<RemoveControlDialog> _localizer;
@inject IClientService _clientService;


<MudDialog>
    <DialogContent>
        <DialogLoading IsLoading="IsLoading">
            <LoadedContent>
                <MudText>@_localizer["Are you sure you want to remove following control?"]</MudText>
            </LoadedContent>
        </DialogLoading>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel"
                   Disabled="IsLoading">
                   @_localizer["Cancel"]
        </MudButton>
        <MudButton OnClick="RemoveAsync"
                   Disabled="IsLoading"
                   Variant="Variant.Filled"
                   Color="Color.Error">@_localizer["Remove"] </MudButton>
    </DialogActions>
</MudDialog>

@code
{
    [CascadingParameter]
    private MudDialogInstance? Dialog { get; set; }

    [Parameter]
    public Control Control { get; set; } = new();
    [Parameter]
    public string DeviceId { get; set; } = string.Empty;
    [Parameter]
    public string ClientId { get; set; } = string.Empty;

    public bool IsLoading { get; set; }

    private void Cancel() => Dialog!.Cancel();

    private async Task RemoveAsync()
    {
        if (string.IsNullOrEmpty(DeviceId) || string.IsNullOrEmpty(ClientId))
            return;

        if (IsLoading)
            return;

        IsLoading = true;

        var result = await _clientService.RemoveControlFromDevice(ClientId, DeviceId, Control);

        var success = RequestHelpers.InvokeAfterRequest(_snackbar, result, _localizer["Successfully removed device."]);

        IsLoading = false;

        if (!success)
            return;

        Dialog!.Close(DialogResult.Ok(result));
    }
}
