@using MQTTnet.Protocol;
@using Presentation.Utils;
@using Presentation.Shared.Dialogs;
@using Presentation.Controls.Implementations.RadioComponents;
@using Presentation.Controls.Implementations.ButtonComponents;
@using Presentation.Controls.Implementations.SwitchComponents;
@using Presentation.Controls.Implementations.SliderComponents;
@using Presentation.Controls.Implementations.TextComponents;
@using Presentation.Controls.Implementations.DateTimeComponents;
@using Presentation.Controls.Implementations.ColorComponents;
@using Presentation.Controls.Implementations.StateComponents;

@inject IStringLocalizer<UpsertControlDialog> _localizer;
@inject IControlService _controlService
@inject IFetchBrokerService _brokerService

@inherits BaseFormDialog

<MudDialog ClassContent="my-mud-dialog-content">
    <DialogContent>
        <PagedLoadingDialog FirstPage="@FirstPage">
            <Title>
                <MudText Align="Align.Start"
                         Typo="Typo.h6">
                    @Title()
                </MudText>
            </Title>
            <FirstPageContent>
                <MudForm @ref="Form"
                         Model="@Model"
                         Validation="@(Validator.ValidateValue)"
                         ValidationDelay="0"
                         Class="m-0 p-0 w-100">
                    <MudGrid Class="m-0 p-0 w-100">

                        <MudItem xs="3"
                                 Class="p-2 m-0">
                            <IconSelector @bind-IconName="@Model.Icon.Name"
                                          Label="Icon" />
                        </MudItem>

                        <MudItem xs="9"
                                 Class="p-2 m-0">
                            <ColorSelector @bind-Value="@Model.Icon.BackgroundHex"
                                           Label="Device Theme" />
                        </MudItem>

                        <MudItem xs="12">
                            <MudTextField @bind-Value="Model.Name"
                                          T="string"
                                          Label="@_localizer["Name"]"
                                          Variant="Variant.Filled"
                                          OnlyValidateIfDirty="true"
                                          Clearable="true"
                                          Class="p-0 m-0"
                                          HelperText="@_localizer["Provide meaningful name."]"
                                          For="@(() => Model.Name)" />
                        </MudItem>

                        <MudItem xs="12">
                            <MudTextField @bind-Value="Model.Topic"
                                          T="string"
                                          Label="@_localizer["Topic"]"
                                          Variant="Variant.Filled"
                                          OnlyValidateIfDirty="true"
                                          Clearable="true"
                                          Class="p-0 m-0"
                                          HelperText="@_localizer["Provide topic ({deviceBaseTopic}{controlTopic})."]"
                                          For="@(() => Model.Topic)" />
                        </MudItem>

                        <MudItem xs="12">
                            <MudSelect @bind-Value="Model.QualityOfService"
                                       Label="@_localizer["Quality of service"]"
                                       For="(() => Model.QualityOfService)"
                                       Variant="Variant.Filled"
                                       AnchorOrigin="Origin.BottomCenter">

                                <MudSelectItem Value="MqttQualityOfServiceLevel.AtMostOnce">@_localizer["At most once - 0"]</MudSelectItem>
                                <MudSelectItem Value="MqttQualityOfServiceLevel.AtLeastOnce">@_localizer["At least once - 1"]</MudSelectItem>
                                <MudSelectItem Value="MqttQualityOfServiceLevel.ExactlyOnce">@_localizer["Exactly once - 2"]</MudSelectItem>
                            </MudSelect>
                        </MudItem>

                        <MudItem xs="12" sm="6">
                            <MudSwitch @bind-Checked="Model.IsAvailable"
                                       Label="@_localizer["Is Avaliable"]"
                                       Color="Color.Primary" />
                        </MudItem>

                        <MudItem xs="12" sm="6">
                            <MudSwitch @bind-Checked="Model.DisplayName"
                                       Label="@_localizer["Display Name"]"
                                       LabelPosition="LabelPosition.End"
                                       Color="Color.Primary" />
                        </MudItem>

                        <MudItem xs="12">
                            <MudSwitch @bind-Checked="Model.IsConfiramtionRequired"
                                       Label="@_localizer["Sending data requires confirmation"]"
                                       Color="Color.Primary" />
                        </MudItem>

                        <MudItem xs="12" Style="margin-bottom: 1rem;">
                            <MudSelect Label="@_localizer["Control Type"]"
                                       For="(() => Model.Type)"
                                       Variant="Variant.Filled"
                                       AnchorOrigin="Origin.BottomCenter"
                                       Disabled="@(!string.IsNullOrEmpty(Model.Id))"
                                       T="ControlType"
                                       Value="Model.Type"
                                       ValueChanged="TypeChanged">

                                <MudSelectItem Value="ControlType.Text">@_localizer["Text (One Way Source)"]</MudSelectItem>
                                <MudSelectItem Value="ControlType.Button">@_localizer["Button (One Way)"]</MudSelectItem>
                                <MudSelectItem Value="ControlType.DateTime">@_localizer["Date Time (One Way)"]</MudSelectItem>
                                <MudSelectItem Value="ControlType.Radio">@_localizer["Radio (Two Way)"]</MudSelectItem>
                                <MudSelectItem Value="ControlType.Slider">@_localizer["Slider (Two Way)"]</MudSelectItem>
                                <MudSelectItem Value="ControlType.Switch">@_localizer["Switch (Two Way)"]</MudSelectItem>
                                <MudSelectItem Value="ControlType.Color">@_localizer["Color (Two Way)"]</MudSelectItem>
                                <MudSelectItem Value="ControlType.State">@_localizer["State (Two Way)"]</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                    </MudGrid>
                </MudForm>
            </FirstPageContent>

            <SecondPageContent>

                @if (Model.Type == ControlType.Button)
                {
                    <ButtonForm @ref="SubForm" Model="AttributesModel"/>
                }
                else if (Model.Type == ControlType.Switch)
                {
                    <SwitchForm @ref="SubForm" Model="AttributesModel"/>
                }
                else if (Model.Type == ControlType.Slider)
                {
                    <SliderForm @ref="SubForm" Model="AttributesModel"/>
                }
                else if (Model.Type == ControlType.Text)
                {
                    <TextForm @ref="SubForm" Model="AttributesModel"/>
                }
                else if (Model.Type == ControlType.Radio)
                {
                    <RadioForm @ref="SubForm" Model="AttributesModel"/>
                }
                else if (Model.Type == ControlType.DateTime)
                {
                    <DateTimeForm @ref="SubForm" Model="AttributesModel"/>
                }
                else if (Model.Type == ControlType.Color)
                {
                    <ColorForm @ref="SubForm" Model="AttributesModel"/>
                }
                else if (Model.Type == ControlType.State)
                {
                    <StateForm @ref="SubForm" Model="AttributesModel" />
                }
            </SecondPageContent>

            <FirstPageActions>
                <MudButton OnClick="Cancel"
                           Variant="Variant.Filled"
                           Color="Color.Error">
                    @_localizer["Cancel"]
                </MudButton>
                <MudButton OnClick="Next"
                           Variant="Variant.Filled"
                           Color="Color.Info">
                    @_localizer["Next"]
                </MudButton>
            </FirstPageActions>

            <SecondPageActions>
                <MudButton OnClick="Cancel"
                           Variant="Variant.Filled"
                           Color="Color.Error">
                    @_localizer["Cancel"]
                </MudButton>
                <MudButton OnClick="Back"
                           Variant="Variant.Filled"
                           Color="Color.Info">
                    @_localizer["Back"]
                </MudButton>
                <MudButton OnClick="SubmitAsync"
                           Variant="Variant.Filled"
                           Color="Color.Primary">
                    @_localizer["Submit"]
                </MudButton>
            </SecondPageActions>
        </PagedLoadingDialog>
    </DialogContent>
</MudDialog>

@code
{
    [Parameter]
    public ControlModel Model { get; set; } = new();
    [Parameter]
    public ControlAttributesModel AttributesModel { get; set; } = new();
    [Parameter]
    public string ClientId { get; set; } = string.Empty;

    public ControlValidator Validator = new();
    public ControlBaseForm SubForm { get; set; } = new();

    public bool FirstPage { get; set; } = true;

    protected override string Title()
        => !string.IsNullOrWhiteSpace(Model.Id) ? _localizer["Update Control"] : _localizer["Add Control"];

    private void TypeChanged(ControlType typeSelected)
    {
        AttributesModel = new();
        AttributesModel.Type = typeSelected;

        switch (typeSelected)
        {
            case ControlType.Slider:
                AttributesModel.PayloadTemplate = string.Empty;
                AttributesModel.MinValue = 0;
                AttributesModel.MaxValue = 100;
                break;
            case ControlType.Switch or ControlType.State:
                AttributesModel.OnPayload = string.Empty;
                AttributesModel.OffPayload = string.Empty;
                break;
            case ControlType.Button:
                AttributesModel.Payload = string.Empty;
                break;
            case ControlType.Radio:
                AttributesModel.Payloads = new();
                break;
            case ControlType.DateTime:
                AttributesModel.SendAsTicks = false;
                AttributesModel.PayloadTemplate = string.Empty;
                break;
            case ControlType.Color:
                AttributesModel.PayloadTemplate = string.Empty;
                AttributesModel.ColorFormat = ColorFormat.HexRGB;
                break;
            default:
                break;
        }

        StateHasChanged();
    }

    private async Task Next()
    {
        await Form.Validate();

        if (!Form.IsValid)
            return;

        FirstPage = false;
    }

    private void Back()
    {
        FirstPage = true;
    }

    private async Task SubmitAsync()
    {
        var result = await _loadingService.InvokeDialogAsync(SubmitAction);

        if (result.Succeeded)
            Dialog!.Close(DialogResult.Ok(result));
    }

    public async Task<IResult> SubmitAction()
    {
        IResult result = Result.Fail();

        await Form.Validate();

        if (!Form.IsValid)
        {
            _snackbar.Add(_localizer["Provided invalid data."], Severity.Error);
            FirstPage = true;
            return result;
        }

        var isSubFormValid = await SubForm.IsValid();

        if (!isSubFormValid)
            return result;

        ControlDto dto = new();

        if (string.IsNullOrEmpty(Model.Id))
            result = await _controlService.CreateControl(ClientId, dto);
        else
            result = await _controlService.UpdateControl(ClientId, dto);

        RequestHelpers.InvokeAfterRequest(_snackbar, result, _localizer["Successfully updated control."]);

        return result;
    }
}