@using MQTTnet.Protocol;
@using Presentation.Utils;
@inject IStringLocalizer<UpsertControlDialog> _localizer;
@inject IClientService _clientService
@inject IBrokerService _brokerService

@inherits BaseFormDialog

<MudDialog>
    <DialogContent>
        <MudForm @ref="Form"
                 Model="@Control"
                 Validation="@(Validator.ValidateValue)"
                 ValidationDelay="0"
                 Class="m-0 p-0 w-100">
            <DialogLoading IsLoading="IsLoading">
                <LoadedContent>
                    <MudGrid Class="m-0 p-3 w-100">

                        <MudItem xs="3"
                                 Class="p-1 m-0">
                            <IconSelector @bind-IconName="@Control.Icon.Name"
                                          Label="Icon" />
                        </MudItem>

                        <MudItem xs="9"
                                 Class="p-1 m-0">
                            <ColorSelector @bind-Value="@Control.Icon.BackgroundHex"
                                           Label="Device Theme" />
                        </MudItem>

                        <MudItem xs="12">
                            <MudTextField @bind-Value="Control.Name"
                                          T="string"
                                          Label="@_localizer["Name"]"
                                          Variant="Variant.Filled"
                                          OnlyValidateIfDirty="true"
                                          Clearable="true"
                                          Class="p-0 m-0"
                                          HelperText="@_localizer["Provide meaningful name."]"
                                          For="@(() => Control.Name)" />
                        </MudItem>

                        <MudItem xs="12">
                            <MudTextField @bind-Value="Control.Topic"
                                          T="string"
                                          Label="@_localizer["Topic"]"
                                          Variant="Variant.Filled"
                                          OnlyValidateIfDirty="true"
                                          Clearable="true"
                                          Class="p-0 m-0"
                                          HelperText="@_localizer["Provide topic ({deviceBaseTopic}{controlTopic})."]"
                                          For="@(() => Control.Topic)" />
                        </MudItem>

                        <MudItem xs="12">
                            <MudSelect @bind-Value="Control.QualityOfService"
                                       Label="@_localizer["Quality of service"]"
                                       For="(() => Control.QualityOfService)"
                                       Variant="Variant.Filled"
                                       AnchorOrigin="Origin.BottomCenter">

                                <MudSelectItem Value="MqttQualityOfServiceLevel.AtMostOnce">@_localizer["At most once - 0"]</MudSelectItem>
                                <MudSelectItem Value="MqttQualityOfServiceLevel.AtLeastOnce">@_localizer["At least once - 1"]</MudSelectItem>
                                <MudSelectItem Value="MqttQualityOfServiceLevel.ExactlyOnce">@_localizer["Exactly once - 2"]</MudSelectItem>
                            </MudSelect>
                        </MudItem>

                        <MudItem xs="12" sm="6">
                            <MudSwitch @bind-Checked="Control.IsAvailable"
                                       Label="@_localizer["Is Avaliable"]"
                                       Color="Color.Primary" />
                        </MudItem>

                        <MudItem xs="12" sm="6">
                            <MudSwitch @bind-Checked="Control.DisplayName"
                                       Label="@_localizer["Display Name"]"
                                       LabelPosition="LabelPosition.End"
                                       Color="Color.Primary" />
                        </MudItem>

                        <MudItem xs="12">
                            <MudSwitch @bind-Checked="Control.IsConfiramtionRequired"
                                       Label="@_localizer["Sending data requires confirmation"]"
                                       Color="Color.Primary" />

                        </MudItem>

                        <MudItem xs="12">
                            <MudSelect Label="Broker"
                                       For="(() => Control.Type)"
                                       Variant="Variant.Outlined"
                                       AnchorOrigin="Origin.BottomCenter"
                                       Disabled="@(!string.IsNullOrEmpty(Control.Id))"
                                       T="ControlType"
                                       ValueChanged="TypeChanged">

                                <MudSelectItem Value="ControlType.Button">@_localizer["Button"]</MudSelectItem>
                                <MudSelectItem Value="ControlType.Switch">@_localizer["Switch"]</MudSelectItem>
                                <MudSelectItem Value="ControlType.Text">@_localizer["Text"]</MudSelectItem>
                                <!--<MudSelectItem Value="ControlType.Slider">@_localizer["Slider"]</MudSelectItem> -->
                            </MudSelect>
                        </MudItem>

                        <MudItem xs="12" Class="p-0 pt-3 pb-3 m-0">
                            <MudProgressLinear Size="Size.Small" Color="Color.Tertiary" Rounded="true" Value="100" />
                        </MudItem>

                        @if (Control.Type == ControlType.Button)
                        {
                            <MudItem xs="12">
                                <MudText> @_localizer["Button is simplest control sending payload to broker when clicked."] </MudText>
                            </MudItem>

                            <MudItem xs="12">
                                <MudTextField @bind-Value="Control.Attributes.Payload"
                                              T="string"
                                              Lines="5"
                                              OnlyValidateIfDirty="true"
                                              Class="p-0 m-0"
                                              Variant="Variant.Outlined"
                                              HelperText="@_localizer["Provide payload to be send on click."]"
                                              For="@(() => Control.Attributes.Payload)" />
                            </MudItem>

                        }
                        else if (Control.Type == ControlType.Switch)
                        {
                            <MudItem xs="12">
                                <MudText>
                                    @_localizer["Switch control "]
                                </MudText>
                            </MudItem>

                            <MudItem xs="12">
                                <MudTextField @bind-Value="Control.Attributes.OnPayload"
                                              T="string"
                                              Lines="5"
                                              Label="@_localizer["On Template"]"
                                              Variant="Variant.Outlined"
                                              OnlyValidateIfDirty="true"
                                              Class="p-0 m-0"
                                              HelperText="@_localizer["Patyload to be send when on action is performed."]"
                                              For="@(() => Control.Attributes.OnPayload)" />
                            </MudItem>

                            <MudItem xs="12">
                                <MudTextField @bind-Value="Control.Attributes.OffPayload"
                                              T="string"
                                              Lines="5"
                                              Label="@_localizer["Off Template"]"
                                              Variant="Variant.Outlined"
                                              OnlyValidateIfDirty="true"
                                              Class="p-0 m-0"
                                              HelperText="@_localizer["Patyload to be send when off action is performed."]"
                                              For="@(() => Control.Attributes.OffPayload)" />
                            </MudItem>

                        }
                        else if (Control.Type == ControlType.Slider)
                        {
                            <MudItem xs="12">
                                <MudText>
                                    @_localizer["Slider control sending payload is to broker when slided. Current slided value will be matched to <<value>> field."]
                                </MudText>
                            </MudItem>

                            <MudItem xs="12">
                                <MudTextField @bind-Value="Control.Attributes.PayloadTemplate"
                                              T="string"
                                              Lines="5"
                                              Label="@_localizer["Payload Template"]"
                                              Variant="Variant.Outlined"
                                              OnlyValidateIfDirty="true"
                                              Class="p-0 m-0"
                                              HelperText="@_localizer["Provide payload to be send on click with inserted value."]"
                                              For="@(() => Control.Attributes.PayloadTemplate)" />
                            </MudItem>

                            <!-- TODO: Insert value button-->
                        }
                        else if (Control.Type == ControlType.Text)
                        {
                            <MudItem xs="12">
                                <MudText>
                                    @_localizer["Text control just displays last recveived data on topic."]
                                </MudText>
                            </MudItem>
                        }
                    </MudGrid>
                </LoadedContent>
            </DialogLoading>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel"
                   Disabled="IsLoading">
                   @_localizer["Cancel"]
        </MudButton>
        <MudButton OnClick="SubmitAsync"
                   Disabled="IsLoading"
                   ButtonType="ButtonType.Submit"
                   Variant="Variant.Filled"
                   Color="Color.Primary">@_localizer["Submit"] </MudButton>
    </DialogActions>
</MudDialog>

@code
{
    [Parameter]
    public Control Control { get; set; } = new();
    [Parameter]
    public string DeviceId { get; set; } = string.Empty;
    [Parameter]
    public string ClientId { get; set; } = string.Empty;

    public ControlValidator Validator = new();

    protected override void OnInitialized()
    {
        if(!string.IsNullOrEmpty(Control.Id))
        {
            Control = Control.Copy();
            StateHasChanged();
        }

        Control.DeviceId = DeviceId;
        base.OnInitialized();
    }

    private void TypeChanged(ControlType typeSelected)
    {
        Control.Type = typeSelected;
        Control.Attributes = new();

        switch (typeSelected)
        {
            case ControlType.Slider:
                Control.Attributes.PayloadTemplate = string.Empty;
                break;
            case ControlType.Switch:
                Control.Attributes.OnPayload = string.Empty;
                Control.Attributes.OffPayload = string.Empty;
                break;
            case ControlType.Text:
                break;
            default:
                Control.Attributes.Payload = string.Empty;
                break;
        }
    }

    private async Task SubmitAsync()
    {
        Control.DeviceId = DeviceId;

        if (IsLoading)
            return;

        await Form.Validate();

        if (!Form.IsValid)
            return;

        IsLoading = true;

        var result = Result.Fail();

        if (string.IsNullOrEmpty(Control.Id))
            result = await _clientService.CreateControlForDevice(ClientId, DeviceId, Control);
        else
            result = await _clientService.UpdateControlForDevice(ClientId, DeviceId, Control);

        var success = RequestHelpers.InvokeAfterRequest(_snackbar, result, _localizer["Successfully updated control."]);

        IsLoading = false;

        if (!success)
            return;

        Dialog!.Close(DialogResult.Ok(result));
    }
}