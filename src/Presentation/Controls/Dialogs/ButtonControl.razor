<MudButton Class="p-0 m-0 w-100 bg-transparent" OnClick="ActionAsync">
    <MudCard Elevation="5"
             Class="container container-fit-content p-0 m-0 w-100 h-100"
             Style="@($"border: 1px solid {Control!.IconBackgroundColor}; border-radius: 1rem; background-color: {BackgroundColor};")">
        <MudGrid Class="p-0 m-0 w-100 h-100 d-flex flex-column">

            <MudItem xs="12" Class="pl-3 pr-3 m-0 pt-4 pb-3 d-flex justify-content-center align-items-center">
                <MudIcon Icon="@Icon" Size="Size.Large" />
            </MudItem>

            <MudItem xs="12" Class="p-1 d-flex justify-content-center align-items-center hide-overlapping-text">
                <MudText Typo="Typo.body1">
                    @Name
                </MudText>
            </MudItem>
        </MudGrid>
    </MudCard>
</MudButton>

@code 
{

    [Parameter]
    public Control? Control { get; set; }
    [Parameter]
    public Client? Client { get; set; }
    [Parameter]
    public Device? Device { get; set; }

    private string BackgroundColor { get; set; } = string.Empty;
    private string Icon { get; set; } = string.Empty;
    private string Name { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        System.Drawing.Color color = System.Drawing.ColorTranslator.FromHtml(Control!.IconBackgroundColor);
        double opacity = ThemeColors.ControlColorOpacity / 255.0;
        BackgroundColor = $"{Control!.IconBackgroundColor}AA";
        Icon = IconUtils.IconList.GetValueOrDefault(Control.Icon, "");
        Name = string.IsNullOrEmpty(Control.Name) ? "No name" : Control.Name;

        Console.WriteLine(Icon);
        Console.WriteLine(Name);
        Console.WriteLine(BackgroundColor);
    }

    public async Task ActionAsync()
    {
        var topic = Control!.GetTopic(Device!);

        await Client!.PublishAsync(topic, Control!.Attributes.Payload, Control!.QualityOfService);
    }
}
