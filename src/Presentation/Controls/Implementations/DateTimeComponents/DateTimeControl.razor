@using Presentation.Utils;
@using System.Text.RegularExpressions;
@inject IStringLocalizer<DateTimeControl> _localizer;

@inherits BaseControl

<BaseControlView Client="@Client"
                 Device="@Device"
                 Control="@Control"
                 Icon="@Icon"
                 ActionAsync="@ActionAsync">

</BaseControlView>

@code
{
    public string Icon = @Icons.Material.Filled.DateRange;

    public double Value { get; set; }

    protected override async void OnInitialized()
    {
        base.OnInitialized();

        if (Control!.IsAvailable)
        {
            var value = await Client!.TopicService!.LastMessageOnTopicAsync(Client!.Id, Device!, Control!) ?? "empty";
        }
    }

    public async Task ActionAsync()
    {
        var options = new DialogOptions { NoHeader=true };

        var dialog = await DialogService!.ShowAsync<DateTimeControlDialog>("", options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var current = Convert.ToDateTime(result.Data);

        if (!await ConfirmationDialog())
            return;

        var payload = Control!.Attributes!.PayloadTemplate!
                      .Replace("$value", FormatTime(Control, current));

        await PublishMessage(payload);
    }

    public static string FormatTime(Control control, DateTime current)
    {
        if (control!.Attributes.SendAsTicks.HasValue && control!.Attributes.SendAsTicks.Value)
            return $"{current.Ticks}";

        return $"{current}";
    }
}
