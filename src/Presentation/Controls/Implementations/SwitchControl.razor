@using Presentation.Utils;
@inherits BaseControl

@inject IStringLocalizer<ButtonControl> _localizer;


<MudCard Elevation="1"
         Class="container container-fit-content p-0 m-0 w-100 h-100"
         Style="@($"border: 1px solid {GetBorderBackgroundColor()}; border-radius: 1rem; background-color: {GetBackgroundColor()};")">
    <MudButton Class="p-0 m-0 w-100 h-100 bg-transparent" OnClick="ActionAsync">
        <MudGrid Class="p-0 m-0 w-100 h-100 d-flex flex-column">

            <MudItem xs="12" Style="position:absolute;"
                     Class="m-0 p-2 d-flex justify-content-end align-items-center">
                <MudIcon Icon="@SwitchIcon"
                         Style="max-height:16px; max-width:16px;" />
            </MudItem>

            @if (Control!.DisplayName)
            {
                <MudItem xs="12" Class="pl-3 pr-3 m-0 pt-4 pb-3 d-flex justify-content-center align-items-center">
                    <MudIcon Icon="@IconUtils.GetIcon(Control?.Icon?.Name!)" Size="Size.Large" />
                </MudItem>

                <MudItem xs="12" Class="p-1 d-flex justify-content-center align-items-center hide-overlapping-text">
                    <MudText Typo="Typo.body1">
                        @GetName()
                    </MudText>
                </MudItem>
            }
            else
            {
                <MudItem xs="12" Class="m-0 p-0 h-100 d-flex justify-content-center align-items-center">
                    <MudElement Class="h-100 w-100">
                        <MudIcon Icon="@IconUtils.GetIcon(Control?.Icon?.Name!)"
                                 Size="Size.Large" />
                    </MudElement>
                </MudItem>
            }
        </MudGrid>
    </MudButton>
</MudCard>

@code
{
    public static string SwitchIcon => Icons.Material.Filled.SwitchLeft;

    public override string GetBackgroundColor()
    {
        if (!Control!.IsAvailable)
        {
            var background = AppTheme!.Palette.DrawerBackground;
            if (IsDarkMode)
                background = AppTheme!.PaletteDark.DrawerBackground;

            background.SetAlpha(background.A * 0.5);
            return background.ToString();
        }

        var current = Client!.TopicService.LastMessageOnTopic(Client!.Id, Device!, Control);

        var color = IsDarkMode ? AppTheme!.PaletteDark.Info.ToString() : AppTheme!.Palette.Info.ToString();

        if (current == Control.Attributes.OnPayload)
            color = IsDarkMode ? AppTheme!.PaletteDark.Success.ToString() : AppTheme!.Palette.Success.ToString();
        else if (current == Control.Attributes.OffPayload)
            color = IsDarkMode ? AppTheme!.PaletteDark.Error.ToString() : AppTheme!.Palette.Error.ToString();

        return $"{color}80";
    }

    public override string GetBorderBackgroundColor()
    {
        if (!Control!.IsAvailable)
        {
            if (IsDarkMode)
                return AppTheme!.PaletteDark.Error.ToString();

            return AppTheme!.Palette.Error.ToString();
        }

        var current = Client!.TopicService.LastMessageOnTopic(Client!.Id, Device!, Control);

        if (current == Control.Attributes.OnPayload)
            return IsDarkMode ? AppTheme!.PaletteDark.Success.ToString() : AppTheme!.Palette.Success.ToString();
        else if (current == Control.Attributes.OffPayload)
            return IsDarkMode ? AppTheme!.PaletteDark.Error.ToString() : AppTheme!.Palette.Error.ToString();

        return IsDarkMode ? AppTheme!.PaletteDark.Info.ToString() : AppTheme!.Palette.Info.ToString();
    }


#pragma warning disable CS0108
    public async Task ActionAsync()
    {
        if (!Control!.IsAvailable)
        {
            _snackbar.Add(_localizer["Hey, this control is currently off!"]);
            return;
        }

        if (!await ConfirmationDialog())
            return;

        var current = Client!.TopicService.LastMessageOnTopic(Client!.Id, Device!, Control);

        var payload = Control!.Attributes.OnPayload;

        if (current == Control.Attributes.OnPayload)
            payload = Control.Attributes.OffPayload;

        await Client!.PublishAsync(Topic, payload!, Control!.QualityOfService);
    }
}

