@using Presentation.Utils;
@inherits BaseControl

@inject IStringLocalizer<ButtonControl> _localizer;

<BaseContr

@code
{
    public static string SwitchIcon => Icons.Material.Filled.SwitchLeft;

    public string Value { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Value = await Client!.TopicService.LastMessageOnTopicAsync(Client!.Id, Device!, Control!);
    }

    public override string GetBackgroundColor()
    {
        if (!Control!.IsAvailable)
        {
            var background = AppTheme!.Palette.DrawerBackground;
            if (IsDarkMode)
                background = AppTheme!.PaletteDark.DrawerBackground;

            background.SetAlpha(background.A * 0.5);
            return background.ToString();
        }

        var current = Client!.TopicService.LastMessageOnTopic(Client!.Id, Device!, Control);

        if (string.IsNullOrEmpty(current))
            current = Value;

        var color = Control!.Icon.BackgroundHex;

        if (current == Control.Attributes.OnPayload)
        {
            color = IsDarkMode ? AppTheme!.PaletteDark.Success.ToString() : AppTheme!.Palette.Success.ToString();
            color = color.Substring(0, color.Length - 2);
        }
        else if (current == Control.Attributes.OffPayload)
        {
            color = IsDarkMode ? AppTheme!.PaletteDark.Error.ToString() : AppTheme!.Palette.Error.ToString();
            color = color.Substring(0, color.Length-2);
        }

        return $"{color}80";
    }

    public override string GetBorderBackgroundColor()
    {
        if (!Control!.IsAvailable)
        {
            if (IsDarkMode)
                return AppTheme!.PaletteDark.Error.ToString();

            return AppTheme!.Palette.Error.ToString();
        }

        var current = Client!.TopicService.LastMessageOnTopic(Client!.Id, Device!, Control);

        if (string.IsNullOrEmpty(current))
            current = Value;

        if (current == Control.Attributes.OnPayload)
            return IsDarkMode ? AppTheme!.PaletteDark.Success.ToString() : AppTheme!.Palette.Success.ToString();
        else if (current == Control.Attributes.OffPayload)
            return IsDarkMode ? AppTheme!.PaletteDark.Error.ToString() : AppTheme!.Palette.Error.ToString();

        return Control!.Icon.BackgroundHex;
    }


#pragma warning disable CS0108
    public async Task ActionAsync()
    {
        if (!Control!.IsAvailable)
        {
            _snackbar.Add(_localizer["Hey, this control is currently off!"]);
            return;
        }

        if (!await ConfirmationDialog())
            return;

        var current = Client!.TopicService.LastMessageOnTopic(Client!.Id, Device!, Control);

        var payload = Control!.Attributes.OnPayload;

        if (current == Control.Attributes.OnPayload)
            payload = Control.Attributes.OffPayload;

        await Client!.PublishAsync(Control!.GetTopic(Device!), payload!, Control!.QualityOfService);
    }
}

