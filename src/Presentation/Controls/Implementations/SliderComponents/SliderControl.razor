@using Presentation.Utils;
@using System.Text.RegularExpressions;
@inject IStringLocalizer<SliderControl> _localizer;

@inherits BaseControl

<BaseControlView Client="@Client"
                 Device="@Device"
                 Control="@Control"
                 Icon="@Icon"
                 Name="@GetName"
                 ActionAsync="@ActionAsync">

</BaseControlView>

@code
{
    public string Icon = @Icons.Material.Filled.LinearScale;

    public double Value { get; set; }

    protected override async void OnInitialized()
    {
        base.OnInitialized();

        if (Control!.IsAvailable)
        {
            var value = await Client!.TopicService!.LastMessageOnTopicAsync(Client!.Id, Device!, Control!) ?? "empty";
            Value = CurrentValueAsync(value, true);
        }
    }

    public override string GetName()
    {
        var value = Client!.TopicService!.LastMessageOnTopic(Client!.Id, Device!, Control!) ?? "empty";
        Value = CurrentValueAsync(value);
        var start = string.IsNullOrEmpty(Control?.Name) ? BaseLocalizer!["No name"] : Control.Name;
        return $"{start} ({Value})";
    }

    public async Task ActionAsync()
    {
        var min = Convert.ToDouble(Control!.Attributes.MinValue);
        var max = Convert.ToDouble(Control!.Attributes.MaxValue);

        var parameters = new DialogParameters<SliderControlDialog>
        {
            { x => x.SliderValue, Value },
            { x => x.MinSliderValue, min },
            { x => x.MaxSliderValue, max },
        };

        var dialog = await DialogService!.ShowAsync<SliderControlDialog>(_localizer["Slide value"], parameters);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var current = Convert.ToDouble(result.Data);

        if (!await ConfirmationDialog())
            return;

        var topic = Control!.GetTopic(Device!);
        var payload = Control!.Attributes!.PayloadTemplate!.Replace("$value", $"{current}");

        await Client!.PublishAsync(topic, payload, Control!.QualityOfService);
    }

    private double CurrentValueAsync(string value, bool isInitilizing = false)
    {
        var regexPattern = Control!.Attributes!.PayloadTemplate!.Replace("$value", @"\d+(\.\d+)?");

        List<double> occurences = Regex.Matches(regexPattern, Regex.Escape(value))
                              .Where(x => double.TryParse(x.Value, out _))
                              .Select(x => double.Parse(x.Value))
                              .ToList();

                              //TODO Check if value is found successfully
        Console.WriteLine(occurences.First());

        if (occurences.Any())
            return occurences.First();

        if (isInitilizing)
            _snackbar.Add(_localizer["Failed to determinate slider value. Assuming minimal."], Severity.Warning);
        return Convert.ToDouble(Control.Attributes.MinValue);
    }
}
