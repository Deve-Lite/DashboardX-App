@using Presentation.Utils;
@using System.Text.RegularExpressions;
@inject IStringLocalizer<SliderControl> _localizer;

@inherits BaseControl

<BaseControlView Client="@Client"
                 Device="@Device"
                 Control="@Control"
                 Icon="@Icon"
                 Name="@GetName"
                 ActionAsync="@ActionAsync">

</BaseControlView>

@code
{
    public string Icon = @Icons.Material.Filled.LinearScale;

    public double Value { get; set; }

    protected override async void OnInitialized()
    {
        base.OnInitialized();

        if (Control!.IsAvailable)
        {
            var value = await Client!.TopicService!.LastMessageOnTopicAsync(Client!.Id, Device!, Control!) ?? "empty";
            Value = CurrentValueAsync(value, true);
        }
    }

    public override string GetName()
    {
        var value = Client!.TopicService!.LastMessageOnTopic(Client!.Id, Device!, Control!) ?? "empty";
        Value = CurrentValueAsync(value);
        var start = string.IsNullOrEmpty(Control?.Name) ? BaseLocalizer!["No name"] : Control.Name;
        return $"{start} ({Value})";
    }

    public async Task ActionAsync()
    {
        var min = Convert.ToDouble(Control!.Attributes.MinValue);
        var max = Convert.ToDouble(Control!.Attributes.MaxValue);

        var parameters = new DialogParameters<SliderControlDialog>
        {
            { x => x.SliderValue, Value },
            { x => x.MinSliderValue, min },
            { x => x.MaxSliderValue, max },
        };
        var options = new DialogOptions { NoHeader=true };

        var dialog = await DialogService!.ShowAsync<SliderControlDialog>(_localizer["Provide Value To Send"], parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var current = Convert.ToDouble(result.Data);

        if (!await ConfirmationDialog())
            return;

        var topic = Control!.GetTopic(Device!);
        var payload = Control!.Attributes!.PayloadTemplate!.Replace("$value", $"{current}");

        await Client!.PublishAsync(topic, payload, Control!.QualityOfService);
    }

    private double CurrentValueAsync(string value, bool isInitilizing = false)
    {
        var index = Control!.Attributes!.PayloadTemplate!.IndexOf("$value");

        if (index == -1 || value.Length < index)
        {
            if (isInitilizing)
                _snackbar.Add(_localizer["Failed to determinate slider value. Assuming minimal."], Severity.Warning);

            return Convert.ToDouble(Control!.Attributes!.MinValue!);
        }

        value = value.Substring(index);

        var occurences = Regex.Matches(value, @"[-+]?\d*[.,]?\d+");

        if (occurences.Any() && double.TryParse(occurences.First().Value, out double actual))
            return actual;

        return Convert.ToDouble(Control!.Attributes!.MinValue!);
    }
}
