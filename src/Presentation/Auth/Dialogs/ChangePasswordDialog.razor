@inject IStringLocalizer<ConfirmDialog> _localizer
@inject IUserService _userService


<MudDialog>
    <DialogContent>
        <MudForm @ref="@form"
                 Model="@Model"
                 Validation="@(Validator.ValidateValue)"
                 ValidationDelay="0">
            <MudItem xs="12">
                <MudTextField @bind-Value="Model.Password"
                              T="string"
                              For="@(() => Model.Password)"
                              InputType="@_newPasswordInput"
                              Variant="Variant.Filled"
                              Adornment="Adornment.End"
                              OnlyValidateIfDirty="true"
                              Clearable="true"
                              AdornmentIcon="@_passwordInputIcon"
                              OnAdornmentClick="TogglePasswordVisibility"
                              Label="@_localizer["Password"]"
                              HelperText="@_localizer["Provide actual password for your account."]" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="Model.NewPassword"
                              T="string"
                              For="@(() => Model.NewPassword)"
                              InputType="@_passwordInput"
                              Variant="Variant.Filled"
                              Adornment="Adornment.End"
                              OnlyValidateIfDirty="true"
                              Clearable="true"
                              AdornmentIcon="@_newPasswordInputIcon"
                              OnAdornmentClick="ToggleNewPasswordVisibility"
                              Label="@_localizer["New Password"]"
                              HelperText="@_localizer["Provide new password for your account."]" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="Model.ConfirmNewPassword"
                              T="string"
                              For="@(() => Model.ConfirmNewPassword)"
                              Variant="Variant.Filled"
                              Clearable="true"
                              InputType="InputType.Password"
                              Label="@_localizer["Confirm New Password"]"
                              HelperText="@_localizer["Please repeat password."]" />
            </MudItem>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@_localizer["Cancel"]</MudButton>
        <MudButton OnClick="ChangeAsync"
                   Variant="Variant.Filled"
                   Color="Color.Primary">@_localizer["Change"] </MudButton>
    </DialogActions>
</MudDialog>

@code
{
    [CascadingParameter]
    private MudDialogInstance? Dialog { get; set; }

    private ChangePasswordModel Model = new();
    private ChangePasswordValidator Validator = new();
    MudForm? form;

    private void Cancel() => Dialog!.Cancel();

    private async Task ChangeAsync()
    {
        if (_loadingService.IsLoading)
            return;

        await form!.Validate();

        if (!form.IsValid)
            return;

        _loadingService.ShowLoading();

        var result = await _userService.ChangePassword(Model);

        RequestHelpers.InvokeAfterRequest(_snackbar, result, _localizer["Successfully changed password!"]);

        _loadingService.HideLoading();
    }

    #region Form

    private bool _passwordVisibility;
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        if (_passwordVisibility)
        {
            _passwordVisibility = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _passwordVisibility = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    private bool _newPasswordVisibility;
    private InputType _newPasswordInput = InputType.Password;
    private string _newPasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void ToggleNewPasswordVisibility()
    {
        if (_newPasswordVisibility)
        {
            _newPasswordVisibility = false;
            _newPasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            _newPasswordInput = InputType.Password;
        }
        else
        {
            _newPasswordVisibility = true;
            _newPasswordInputIcon = Icons.Material.Filled.Visibility;
            _newPasswordInput = InputType.Text;
        }
    }

    #endregion
}
