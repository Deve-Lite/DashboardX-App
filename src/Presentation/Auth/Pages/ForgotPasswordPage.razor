@page "/auth/forgotpassword"

@attribute [AllowAnonymous]

@inject IStringLocalizer<ForgotPasswordPage> _localizer;
@inject IAuthenticationService _authenticationService;

@inherits BaseAuthPage

<PageLoading>
    <LoadedContent>
        <MudCard Class="container d-flex container-fit-content p-5" Style="border-radius: 1rem;">
                <MudForm @ref="@Form"
                         Model="@Model"
                         Validation="@(Validator.ValidateValue)"
                         ValidationDelay="0">
                    <MudGrid>

                        <MudItem xs="12">
                            <MudTextField @bind-Value="Model.Email"
                                          T="string"
                                          OnlyValidateIfDirty="true"
                                          Variant="Variant.Filled"
                                          HelperText="@_localizer["Provide email for your account."]"
                                          Label="@_localizer["Email"]"
                                          For="@(() => Model.Email)" />
                        </MudItem>

                        <MudItem xs="12">
                            <MudButton Variant="Variant.Filled"
                                       OnClick="SendEmailAsync"
                                       Color="Color.Primary"
                                       Size="Size.Large"
                                       EndIcon="@Icons.Material.Filled.Login"
                                       Style="width: 100%;">
                                @_localizer["Send email"]
                            </MudButton>
                        </MudItem>

                    </MudGrid>
                </MudForm>
        </MudCard>
    </LoadedContent>
</PageLoading>

@code
{

    public ForgetPasswordModel Model { get; set; } = new();
    public ForgetPasswordValidator Validator { get; set; } = new();

    private async Task SendEmailAsync()
    {
        if (_loadingService.IsLoading)
            return;

        await Form!.Validate();

        if (!Form.IsValid)
            return;

        _loadingService.ShowLoading();

        //var result = await _authenticationService.Login(Model);
        //await RequestHelpers.InvokeAfterRequest(_snackbar, result, OnSuccessfullLogin);

        _loadingService.HideLoading();
    }
}
