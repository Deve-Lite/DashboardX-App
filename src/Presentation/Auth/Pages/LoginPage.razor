@page "/"
@page "/auth/login"
@using Presentation.Utils;
@using Presentation.Shared;

@attribute [AllowAnonymous]
@inject IStringLocalizer<LoginPage> _localizer
@inject ILocalStorageService _localStorage
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IUserService _userService
@inject IPrefrenceService _preferenceService

@inherits BaseAuthPage

<PageLoading>
    <LoadedContent>
        <MudCard Class="container d-flex container-fit-content p-5" Style="border-radius: 1rem;">
            <MudForm @ref="@Form"
                     Model="@Model"
                     Validation="@(LoginValidator.ValidateValue)"
                     ValidationDelay="0">
                <MudGrid>

                    <MudItem xs="12">
                        <MudText Class="text-center"
                                 Color="Color.Primary"
                                 Typo="Typo.h4">
                            @_localizer["DashboardX"]
                        </MudText>
                    </MudItem>

                    <MudItem xs="12">
                        <MudText Class="text-center">
                            @_localizer["Don't know what to do with your custom IoT device? Use It. It is so simple."]
                        </MudText>
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="Model.Email"
                                      T="string"
                                      OnlyValidateIfDirty="true"
                                      Variant="Variant.Filled"
                                      HelperText="@_localizer["Provide email for your account."]"
                                      Label="@_localizer["Email"]"
                                      For="@(() => Model.Email)" />
                    </MudItem>
                    <MudItem xs="12" Class="h">
                        <PasswordTextField @bind-Value="Model.Password"
                                      Label="@_localizer["Password"]"
                                      HelperText="@_localizer["Provide password for your account."]"
                                      For="@(() => Model.Password)" />
                    </MudItem>
                    <MudItem xs="12" Class="d-flex justify-space-between align-center">
                        <MudLink Href="/auth/forgot">@_localizer["Forgot password?"]</MudLink>

                        <MudCheckBox @bind-Checked="RememberMe"
                                     T="bool"
                                     Label="@_localizer["Remember Me"]"
                                     Color="Color.Primary"
                                     Class="ml-n1" />
                    </MudItem>
                    <MudItem xs="7">

                        @if (ResendButtonVisible)
                        {
                            <MudButton Variant="Variant.Filled"
                                       OnClick="ResendConfirmEmail"
                                       Color="Color.Primary"
                                       Size="Size.Large"
                                       EndIcon="@Icons.Material.Filled.Email"
                                       Style="width: 100%;">
                                @_localizer["Resend confirm email"]
                            </MudButton>
                        }

                    </MudItem>
                    <MudItem xs="5" Class="d-flex justify-end">
                        <MudButton Variant="Variant.Filled"
                                   OnClick="LoginAsync"
                                   Color="Color.Primary"
                                   Size="Size.Large"
                                   EndIcon="@Icons.Material.Filled.Login"
                                   Style="width: 100%;">
                            @_localizer["Sign In"]
                        </MudButton>

                    </MudItem>

                    @if (IsDebug)
                    {
                        <MudItem xs="12">
                            <MudButton OnClick="FillAdministratorCredentials">
                                @_localizer["Fill Administrator Credentials"]
                            </MudButton>
                        </MudItem>
                        <MudItem xs="12">
                            <MudButton OnClick="FillBasicUserCredentials">
                                @_localizer["Login with user Credentials."]
                            </MudButton>
                        </MudItem>
                    }

                    <MudItem xs="12">
                        <MudText Class="text-center">
                            <MudLink Color="Color.Primary" Href="/auth/register" Typo="Typo.h6">
                                @_localizer["Sign up"]
                            </MudLink>
                            @_localizer["now for a smarter tommorow!"]
                        </MudText>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudCard>
    </LoadedContent>
</PageLoading>

@code
{
    private LoginModel Model = new();
    private LoginValidator LoginValidator = new();

    private bool ResendButtonVisible { get; set; } = false;

    private async Task LoginAsync()
    {
        var result = await _loadingService.InvokeAsync(LoginAction);

        if (result.Succeeded)
            await OnSuccessfullLogin();
    }

    private async Task<IResult> LoginAction()
    {
        await Form!.Validate();

        if (!Form.IsValid)
            return Result.Fail();

        await _localStorage.SetItemAsync(AuthConstraints.RememberMeName, RememberMe);

        var result = await AuthenticationService.Login(Model);

        if (result.StatusCode == System.Net.HttpStatusCode.Conflict)
        {
            _snackbar.Add(_localizer["Please confirm your email before logging."], Severity.Info);
            ResendButtonVisible = true;
        }
        else
            RequestHelpers.InvokeAfterRequest(_snackbar, result);

        return result;
    }

    private async Task ResendConfirmEmail()
    {
        var dto = new ResendConfirmEmailModel
            {
                Email = Model.Email
            };

        var result = await AuthenticationService.ResendConfirmEmail(dto);

        if (result.Succeeded)
            _snackbar.Add(_localizer["Email resend to"] + $" {dto.Email}", Severity.Info);
        else
            _snackbar.Add(_localizer["Faild to resend email"], Severity.Error);
    }

    #region Debug

    private void FillAdministratorCredentials()
    {
        Model.Email = "psp515@wp.pl";
        Model.Password = "Admin123!";
    }

    private void FillBasicUserCredentials()
    {
        Model.Email = "dred@gmail.pl";
        Model.Password = "User123!";
    }

    #endregion
}
