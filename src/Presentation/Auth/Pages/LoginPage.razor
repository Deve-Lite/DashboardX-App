@page "/"
@page "/auth/login"

@attribute [AllowAnonymous]
@inject IStringLocalizer<LoginPage> _localizer
@inject ILocalStorageService _localStorage
@inject IAuthenticationService _authenticationService
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IUserService _userService
@inject IPrefrenceService _preferenceService

<PageLoading>
    <LoadedContent>
        <MudCard Class="container d-flex container-fit-content p-5" Style="border-radius: 1rem;">
            <MudForm @ref="@form"
                     Model="@LoginData"
                     Validation="@(LoginValidator.ValidateValue)"
                     ValidationDelay="0">
                <MudGrid>

                    <MudItem xs="12">
                        <MudText Class="text-center"
                                 Color="Color.Primary"
                                 Typo="Typo.h4">
                            @_localizer["DashboardX"]
                        </MudText>
                    </MudItem>

                    <MudItem xs="12">
                        <MudText Class="text-center">
                            @_localizer["Don't know what to do with your custom IoT device? Use It. It is so simple."]
                        </MudText>
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="LoginData.Email"
                                      T="string"
                                      OnlyValidateIfDirty="true"
                                      Variant="Variant.Filled"
                                      HelperText="@_localizer["Provide email for your account."]"
                                      Label="@_localizer["Email"]"
                                      For="@(() => LoginData.Email)" />
                    </MudItem>
                    <MudItem xs="12" Class="h">
                        <MudTextField @bind-Value="LoginData.Password"
                                      Label="@_localizer["Password"]"
                                      HelperText="@_localizer["Provide password for your account."]"
                                      OnlyValidateIfDirty="true"
                                      For="@(() => LoginData.Password)"
                                      Variant="Variant.Filled"
                                      InputType="@_passwordInput"
                                      Adornment="Adornment.End"
                                      AdornmentIcon="@_passwordInputIcon"
                                      OnAdornmentClick="TogglePasswordVisibility" />
                    </MudItem>
                    <MudItem xs="12" Class="d-flex justify-space-between align-center">
                        <MudLink Href="/account/forgot-password">@_localizer["Forgot password?"]</MudLink>

                        <MudCheckBox @bind-Checked="RememberMe"
                                     T="bool"
                                     Label="@_localizer["Remember Me"]"
                                     Color="Color.Primary"
                                     Class="ml-n1" />
                    </MudItem>
                    <MudItem xs="7">

                    </MudItem>
                    <MudItem xs="5" Class="d-flex justify-end">
                        <MudButton Variant="Variant.Filled"
                                   OnClick="LoginAsync"
                                   Color="Color.Primary"
                                   Size="Size.Large"
                                   EndIcon="@Icons.Material.Filled.Login"
                                   Style="width: 100%;">
                            @_localizer["Sign In"]
                        </MudButton>

                    </MudItem>

                    @if (IsDebug)
                    {
                        <MudItem xs="12">
                            <MudButton OnClick="FillAdministratorCredentials">
                                @_localizer["Fill Administrator Credentials"]
                            </MudButton>
                        </MudItem>
                        <MudItem xs="12">
                            <MudButton OnClick="FillBasicUserCredentials">
                                @_localizer["Login with user Credentials."]
                            </MudButton>
                        </MudItem>
                    }

                    <MudItem xs="12">
                        <MudText Class="text-center">
                            <MudLink Color="Color.Primary" Href="/auth/register" Typo="Typo.h6">
                                @_localizer["Sign up"]
                            </MudLink>
                            @_localizer["now for a smarter tommorow!"]
                        </MudText>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudCard>
    </LoadedContent>
</PageLoading>

@code
{
    public bool IsDebug { get; set; }
    private bool RememberMe { get; set; }

    private LoginModel LoginData = new();
    private LoginValidator LoginValidator = new();
    MudForm? form;

    protected override async Task OnInitializedAsync()
    {

#if DEBUG
    IsDebug = true;
#endif
        //TODO: refactor it for using using(var xxx) 

        if (_loadingService.IsLoading)
            return;

        _loadingService.ShowLoading();

        RememberMe = await _localStorage.GetItemAsync<bool>(AuthConstraints.RememberMeName);

        if (!RememberMe)
        {
            _loadingService.HideLoading();
            return;
        }

        var refreshToken = await _localStorage.GetItemAsync<string>(AuthConstraints.RefreshToken);

        if (string.IsNullOrEmpty(refreshToken))
        {
            _loadingService.HideLoading();
            return;
        }

        var result = await _authenticationService.ReAuthenticate(refreshToken);

        await RequestHelpers.InvokeAfterRequest(_snackbar, result, OnSuccessfullLogin);

        _loadingService.HideLoading();
    }

    private async Task LoginAsync()
    {
        if (_loadingService.IsLoading)
            return;

        await form!.Validate();

        if (!form.IsValid)
            return;

        _loadingService.ShowLoading();

        await _localStorage.SetItemAsync(AuthConstraints.RememberMeName, RememberMe);

        var result = await _authenticationService.Login(LoginData);

        await RequestHelpers.InvokeAfterRequest(_snackbar, result, OnSuccessfullLogin);

        _loadingService.HideLoading();
    }

    private async Task OnSuccessfullLogin()
    {
        var result = await _userService.GetUser();

        if (!result.Succeeded)
            _snackbar.Add(_localizer["Couldn't load user settings."], MudBlazor.Severity.Warning);

        _snackbar.Add(_localizer["Hello there!"], MudBlazor.Severity.Success);

        _loadingService.HideLoading();

        _navigationManager.NavigateTo("/brokers");
    }

    #region Form

    private bool _passwordVisibility;
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        if (_passwordVisibility)
        {
            _passwordVisibility = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _passwordVisibility = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    #endregion

    #region Debug

    private void FillAdministratorCredentials()
    {
        LoginData.Email = "psp515@wp.pl";
        LoginData.Password = "Admin123!";
    }

    private void FillBasicUserCredentials()
    {
        LoginData.Email = "dred@gmail.pl";
        LoginData.Password = "User123!";
    }

    #endregion
}
