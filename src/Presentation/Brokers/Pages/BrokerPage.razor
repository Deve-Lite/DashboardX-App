@page "/brokers/{BrokerId}"

@using Presentation.Devices;
@using Presentation.Brokers;
@using Presentation.Utils;
@using Presentation.Controls.Implementations;
@using Presentation.Brokers.Shared;
@using Presentation.Devices.Shared;

@inject IClientService _clientService
@inject IStringLocalizer<BrokerPage> _localizer

@implements IDisposable

@inherits BasePage

<PageLoading FailedToLoad="!LoadedSuccessfully">
    <FailedToLoadContent>
        <RefreshPageButton RefreshPage="LoadPage" />
    </FailedToLoadContent>
    <LoadedContent>

        <AddButton OnClick="() => DevicePagesUtils.AddDevice(_dialogService, Client!.Id)"
                   Class="add-wrapper" />

        <MudGrid Class="m-0 p-3 w-100">

            <MudItem xs="12" Class="p-0 m-0">
                <Breadcrumbs BreadcrumbItems="@BreadcrumbItems" />
            </MudItem>

            <MudItem xs="12" Class="p-0 m-0 pt-3 pb-3 mud-w-auto">
                <MudCard Elevation="5"
                         Class="m-0 p-4 rounded-2">
                    <MudCardContent Class="m-0 p-0">
                        <MudGrid Class="p-0 m-0 w-100">

                            <MudItem xs="12">
                                <MudText Typo="Typo.h6" Class="hide-overlapping-text">
                                    @Client!.GetBroker().Name
                                </MudText>
                            </MudItem>

                            <MudItem xs="12" Class="p-0 m-0">
                                <MudText Typo="Typo.button" Class="p-1 pl-0 m-0">
                                    @_localizer["Server"]
                                </MudText>
                                <MudText Class="hide-overlapping-text">
                                    @Client!.GetBroker().Server
                                </MudText>
                            </MudItem>

                            <MudItem xs="6" sm="5" md="4" lg="3" xl="2" Class="p-0 m-0">
                                <MudText Typo="Typo.button" Class="p-1 pl-0 m-0">
                                    @_localizer["Port"]
                                </MudText>

                                <MudText Class="hide-overlapping-text">
                                    @Client!.GetBroker().Port
                                </MudText>
                            </MudItem>

                            <MudItem xs="6" sm="5" md="4" lg="3" xl="2" xxl="1" Class="p-0 m-0">
                                <MudText Typo="Typo.button" Class="p-1 pl-0 m-0">
                                    @_localizer["Keep Alive"]
                                </MudText>
                                <MudText Class="hide-overlapping-text">
                                    @Client!.GetBroker().KeepAlive
                                </MudText>
                            </MudItem>

                            <MudItem xs="12" sm="5" md="4" lg="3" xl="2" Class="p-0 m-0">

                                <MudText Typo="Typo.button" Class="p-1 pl-0 m-0">
                                    @_localizer["Client Id"]
                                </MudText>

                                <MudText Class="hide-overlapping-text">
                                    @Client!.GetBroker().ClientId
                                </MudText>
                            </MudItem>

                        </MudGrid>
                    </MudCardContent>

                    <MudItem xs="12" Class="p-0 pt-2 pb-2 m-0">
                        <MudProgressLinear Size="Size.Small" Color="Color.Tertiary" Rounded="true" Value="100" />
                    </MudItem>

                    <MudCardActions Class="p-0 m-0">
                        <MudGrid Class="m-0 p-0 pt-2">
                            <MudItem Class="p-2 pb-0 pl-0 pt-0 m-0">
                                <BrokerConnection Client="@Client" />
                            </MudItem>

                            <MudItem Class="p-2 pb-0 pt-0 m-0">
                                <MudIconButton Class="z-10"
                                               Icon="@IconUtils.DefaultEditIcon"
                                               Variant="Variant.Filled"
                                               OnClick="() => BrokerPagesUtils.UpdateBroker(Client!, _dialogService)" />

                            </MudItem>

                            <MudItem Class="p-2 pb-0 pt-0  m-0">
                                <MudIconButton Class="z-10"
                                               Icon="@IconUtils.DefaultRemoveIcon"
                                               Variant="Variant.Filled"
                                               OnClick="() => BrokerPagesUtils.RemoveBroker(Client!, _dialogService, _navigationManager)" />

                            </MudItem>
                        </MudGrid>
                    </MudCardActions>
                </MudCard>
            </MudItem>

            <MudItem Class="p-0 m-0" xs="12" sm="12" md="3" lg="5" xl="7" xxl="8">

            </MudItem>

            <MudItem Class="p-2 m-0" xs="12">

                <MudText Typo="Typo.h6" Class="hide-overlapping-text">
                    @_localizer["Devices"]
                </MudText>

                <MudProgressLinear Size="Size.Small" Color="Color.Primary" Rounded="true" Value="100" />
            </MudItem>

            @foreach (var device in Client!.GetDevices())
            {
                <MudItem Class="p-1 m-0" xs="12" sm="6" md="4" lg="3" xl="2">
                    <DeviceElement Client="@Client" DeviceId="@device.Id" />
                </MudItem>
            }
        </MudGrid>
    </LoadedContent>
</PageLoading>

@code
{
    [Parameter]
    public string BrokerId { get; set; } = string.Empty;

    private IClient? Client { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await _loadingService.InvokeAsync(LoadPage);
    }

    protected async Task RefreshPage()
    {
        await _loadingService.InvokeAsync(LoadPage);
    }

    protected async Task<IResult> LoadPage()
    {
        var result = await _clientService.GetClient(BrokerId);

        if (result.Succeeded)
        {
            Client = result.Data; 
            Client?.SetOnMessageReceivedEventHandler(RerenderPage);
            LoadedSuccessfully = true;
        }
        else
        {
            LoadedSuccessfully = false;
        }

        if (result.ShowToast)
            foreach (var message in result.Messages)
                _snackbar.Add(message, result.Severity);

        BreadcrumbItems = new()
        {
            new BreadcrumbItem("Brokers", href: "/brokers"),
            new BreadcrumbItem($"{Client!.GetBroker().Name}", href: $"/brokers/{Client!.GetBroker().Id}"),
        };

        return result;
    }

    public void Dispose()
    {
        Client?.ClearOnMessageReceivedEventHandler();
    }
}
