@page "/brokers"
@using Presentation.Utils;
@using Presentation.Brokers.Shared;

@inject IClientService _clientService
@inject IStringLocalizer<BrokerListPage> _localizer

@inherits BasePage

<PageLoading FailedToLoad="!LoadedSuccessfully">
    <FailedToLoadContent>
        <RefreshPageButton RefreshPage="RefreshPage" />
    </FailedToLoadContent>
    <LoadedContent>

        <AddButton OnClick="() => BrokerPagesUtils.AddBroker(_dialogService)"
                   Class="add-wrapper" />

        <MudGrid Class="m-0 p-3 w-100">

            <MudItem xs="12" Class="p-0 m-0">
                <Breadcrumbs BreadcrumbItems="@BreadcrumbItems" />
            </MudItem>

            @foreach (var client in Clients)
            {
                <MudItem xs=12 sm="6" md="4" lg="3" xl="2" xxl="1" Class="m-0 p-1 w-100">
                    <BrokerElement Client="@client" />
                </MudItem>
            }

        </MudGrid>
    </LoadedContent>
</PageLoading>

@code
{
    private IList<IClient> Clients { get; set; } = new List<IClient>();

    public BrokerListPage()
    {
        BreadcrumbItems = new()
        {
            new BreadcrumbItem("Brokers", href: "/brokers"),
        };
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _loadingService.SetRefreshAction(SilentRefreshPage);
        await _loadingService.InvokeAsync(LoadPage);
    }

    protected async Task SilentRefreshPage()
    {
        var result = await _clientService.GetClients(false);

        if (result.Succeeded)
        {
            Clients = result.Data;

            foreach (var client in Clients)
                client.SetOnMessageReceivedEventHandler(RerenderPage);
        }

        await RerenderPage();
    }

    protected async Task RefreshPage()
    {
        await _loadingService.InvokeAsync(LoadPage);
    }

    public async Task<IResult> LoadPage()
    {
        var result = await _clientService.GetClients();
        if (result.Succeeded)
        {
            Clients = result.Data;

            foreach (var client in Clients)
                client.SetOnMessageReceivedEventHandler(RerenderPage);

            LoadedSuccessfully = true;
        }
        else
        {
            LoadedSuccessfully = false;
            if (result.ShowToast)
                _snackbar.Add(result.Messages[0], result.Severity);
        }

        return result;
    }

    public void Dispose()
    {
        foreach (var client in Clients)
            client?.ClearOnMessageReceivedEventHandler();
    }
}
