@page "/brokers"
@using Presentation.Utils;

@inject IClientService _clientService
@inject IStringLocalizer<BrokerListPage> _localizer

@inherits BasePage

<PageLoading FailedToLoad="!LoadedSuccessfully">
    <FailedToLoadContent>
        <RefreshPageButton RefreshPage="LoadPage" />
    </FailedToLoadContent>
    <LoadedContent>
        <MudGrid Class="m-0 p-3 w-100">

            <MudItem xs="7"> </MudItem>
            <MudItem xs="5" Class="d-flex justify-content-end">

                <MudButton OnClick="() => BrokerPagesUtils.AddBroker(_dialogService, StateHasChanged, _localizer)"
                           Color="Color.Primary"
                           Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.AddToQueue">
                    @_localizer["Add Broker"]
                </MudButton>


            </MudItem>

            <MudItem Class="p-0" xs="12">
                <MudList Class="p-0 m-0"
                         Dense="true"
                         Clickable="true">
                    <MudListSubheader Class="d-flex p-0 m-0">
                        <MudGrid Class="p-0 m-0">
                            <MudItem xs="1" Class="p-1 m-0">

                            </MudItem>
                            <MudItem xs="2" Class="d-flex p-1 m-0 align-items-center justify-content-start">
                                <MudText Typo="Typo.h6">
                                    @_localizer["Name"]
                                </MudText>
                            </MudItem>
                            <MudItem xs="4" Class="d-flex p-1 m-0 align-items-center justify-content-start">
                                <MudText Typo="Typo.h6">
                                    @_localizer["Server"]
                                </MudText>
                            </MudItem>
                            <MudItem xs="1" Class="d-flex p-1 m-0 align-items-center justify-content-start">
                                <MudText Typo="Typo.h6">
                                    @_localizer["Port"]
                                </MudText>
                            </MudItem>
                            <MudItem xs="2" Class="d-flex p-1 m-0 align-items-center justify-content-center">
                                <MudText Typo="Typo.h6">
                                    @_localizer["Status"]
                                </MudText>
                            </MudItem>
                            <MudItem xs="2" Class="p-1 m-0"> </MudItem>
                        </MudGrid>

                    </MudListSubheader>

                    <MudProgressLinear Size="Size.Small" Color="Color.Primary" Rounded="true" Value="100" />

                    @foreach (var client in Clients)
                    {
                        <MudListItem Class="d-flex m-0 p-0 pt-1 pb-1"
                                     Href="@($"/brokers/{client.Id}")">
                            <MudGrid Class="w-100 p-0 m-0">
                                <MudItem xs="1" Class="d-flex m-0 p-0 align-items-center justify-content-center">
                                    <IconForList Icon="@client!.Broker.Icon"
                                                 IconSize="Size.Medium" />
                                </MudItem>
                                <MudItem xs="2" Class="d-flex m-0 p-0 align-items-center justify-content-start">
                                    <MudText>
                                        @client.Broker.Name
                                    </MudText>
                                </MudItem>

                                <MudItem xs="4" Class="d-flex m-0 p-0 align-items-center justify-content-start">
                                    <MudText Class="hide-overlapping-text">
                                        @client.Broker.Server
                                    </MudText>
                                </MudItem>

                                <MudItem xs="1" Class="d-flex m-0 p-0 align-items-center justify-content-start">
                                    <MudText>
                                        @client.Broker.Port
                                    </MudText>
                                </MudItem>

                                <MudItem xs="2" Class="d-flex m-0 p-0 align-items-center justify-content-center">
                                    <BrokerConnectionSwitch Client="client" />
                                </MudItem>
                                <MudItem xs="2" Class="d-flex m-0 p-0 align-items-center justify-content-evenly">
                                    <MudIconButton Class="z-10"
                                                   Icon="@IconUtils.DefaultEditIcon"
                                                   OnClick="() => BrokerPagesUtils.UpdateBroker(client, _dialogService, StateHasChanged, _localizer)">

                                    </MudIconButton>

                                    <MudIconButton Class="z-10"
                                                   Icon="@IconUtils.DefaultRemoveIcon"
                                                   OnClick="() => BrokerPagesUtils.RemoveBroker(client, _dialogService, StateHasChanged, _localizer)">

                                    </MudIconButton>
                                </MudItem>
                            </MudGrid>

                        </MudListItem>

                        <MudProgressLinear Size="Size.Small" Color="Color.Primary" Rounded="true" Value="0" />
                    }
                </MudList>
            </MudItem>
        </MudGrid>
    </LoadedContent>
</PageLoading>

@code 
{
    private List<IClient> Clients { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadPage();
        await base.OnInitializedAsync();
    }

    public async Task LoadPage()
    {
        if (_loadingService.IsLoading)
            return;

        _loadingService.ShowLoading();

        var result = await _clientService.GetClients();
        if (result.Succeeded)
        {
            Clients = result.Data;
            LoadedSuccessfully = true;
        }
        else
        {
            LoadedSuccessfully = false;
        }

        if (result.ShowToast)
            foreach (var message in result.Messages)
                _snackbar.Add(message, result.Severity);

        _loadingService.HideLoading();

        StateHasChanged();
    }

    private async Task ConnectAsync(Client client)
    {
        var result = await client.ConnectAsync();

        if (!result && result.ShowToast)
            _snackbar.Add(result.Messages.First(), Severity.Error);
    }

    private void NavigateToBroker(Client clinet)
    {
        _navigationManager.NavigateTo($"/brokers/{clinet.Id}");
    }
}
