@using Presentation.Utils;
@using Presentation.Shared.Dialogs;
@inject IStringLocalizer<RemoveBrokerDialog> _localizer;
@inject IBrokerService _brokerService;

@inherits BaseDialog

<MudDialog>
    <DialogContent>
        <LoadingDialog>
            <Content>
                <MudElement Class="p-3">
                    <MudText>@_localizer["Are you sure you want to remove this broker?"]</MudText>
                    <MudText Class="hide-overlapping-text">@_localizer["Server name:"] @Broker.Name</MudText>
                    <MudText Class="hide-overlapping-text">@_localizer["Server url:"] @Broker.Server</MudText>
                    <MudText Class="hide-overlapping-text">@_localizer["Client id:"] @Broker.ClientId</MudText>
                </MudElement>
            </Content>
            <Actions>
                <MudButton OnClick="Cancel" Class="m-1">
                    @_localizer["Cancel"]
                </MudButton>
                <MudButton OnClick="RemoveAsync"
                           Class="m-1"
                           Variant="Variant.Filled"
                           Color="Color.Error">
                    @_localizer["Remove"]
                </MudButton>
            </Actions>
        </LoadingDialog>
    </DialogContent>
</MudDialog>

@code
{
    // TODO: Implement new way of handling dialogs
    // TODO: Test look of loading action in dialogs 
    // TODO: Remove space betwen title

    [Parameter]
    public Broker Broker { get; set; } = new();

    private async Task RemoveAsync()
    {
        if (string.IsNullOrEmpty(Broker.Id))
            return;

        if (IsLoading)
            return;

        IsLoading = true;

        var result = await _brokerService.RemoveBroker(Broker.Id);

        var success = RequestHelpers.InvokeAfterRequest(_snackbar, result, _localizer["Successfully removed broker."]);

        IsLoading = false;

        if (!success)
            return;

        Dialog!.Close(DialogResult.Ok(result));
    }
}
