@using Presentation.Utils;
@using Presentation.Shared.Dialogs;
@inject IStringLocalizer<RemoveBrokerDialog> _localizer;
@inject IBrokerService _brokerService;

@inherits BaseDialog

<MudDialog>
    <DialogContent>
        <LoadingDialog>
            <Title>
                <MudText Align="Align.Start"
                         Class="m-0 mt-2 mb-2"
                         Typo="Typo.h6">
                    @_localizer["Remove Broker"]
                </MudText>
            </Title>
            <Content>
                <MudText>@_localizer["Are you sure you want to remove this broker?"]</MudText>
                <MudText Class="hide-overlapping-text">@_localizer["Server name:"] @Broker.Name</MudText>
                <MudText Class="hide-overlapping-text">@_localizer["Server url:"] @Broker.Server</MudText>
                <MudText Class="hide-overlapping-text">@_localizer["Client id:"] @Broker.ClientId</MudText>
            </Content>
            <Actions>
                <MudButton OnClick="Cancel" Class="m-1">
                    @_localizer["Cancel"]
                </MudButton>
                <MudButton OnClick="RemoveAsync"
                           Class="m-1"
                           Variant="Variant.Filled"
                           Color="Color.Error">
                    @_localizer["Remove"]
                </MudButton>
            </Actions>
        </LoadingDialog>
    </DialogContent>
</MudDialog>

@code
{
    [Parameter]
    public Broker Broker { get; set; } = new();

    private async Task RemoveAsync()
    {
        if (string.IsNullOrEmpty(Broker.Id))
            return;

        if (IsLoading)
            return;

        var options = Dialog.Options;
        options.DisableBackdropClick = true;
        Dialog!.SetOptions(options);

        // TODO: Create method invoking provided function that solves problem of IsLoading func

        _loadingService.ShowLoading();

        var result = await _brokerService.RemoveBroker(Broker.Id);

        var success = RequestHelpers.InvokeAfterRequest(_snackbar, result, _localizer["Successfully removed broker."]);

        _loadingService.HideLoading();

        if (!success)
        {
            options.DisableBackdropClick = false;
            Dialog!.SetOptions(options);
            return;
        }

        Dialog!.Close(DialogResult.Ok(result));
    }
}
