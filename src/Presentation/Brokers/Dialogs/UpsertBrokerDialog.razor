@using Presentation.Utils;
@inject IStringLocalizer<UpsertBrokerDialog> _localizer;
@inject IClientService _clientService
@inject IBrokerService _brokerService

@inherits BaseFormDialog

<MudDialog>
    <DialogContent>
        <DialogLoading IsLoading="IsLoading">
            <LoadedContent>
                <MudForm @ref="@Form"
                         Model="@Model"
                         Validation="@(BrokerValidator.ValidateValue)"
                         ValidationDelay="0"
                         Class="m-0 p-0 w-100">
                    <MudGrid Class="m-0 p-3 pt-0 w-100">

                        <MudItem xs="3"
                                 Class="p-1 m-0">
                            <IconSelector @bind-IconName="@Model.Icon.Name"
                                          Label="Icon" />
                        </MudItem>

                        <MudItem xs="9"
                                 Class="p-1 m-0">
                            <ColorSelector @bind-Value="@Model.Icon.BackgroundHex"
                                           Label="Additional Theme" />
                        </MudItem>

                        <MudItem xs="12"
                                 Class="p-1 m-0">
                            <MudTextField @bind-Value="Model.Name"
                                          T="string"
                                          Label="@_localizer["Name"]"
                                          Variant="Variant.Filled"
                                          OnlyValidateIfDirty="true"
                                          Clearable="true"
                                          Class="p-0 m-0"
                                          For="@(() => Model.Name)"
                                          HelperText="@_localizer["Provide meaningful name."]" />
                        </MudItem>

                        <MudItem xs="12"
                                 Class="p-1 m-0">
                            <MudTextField @bind-Value="Model.Server" T="string"
                                          Label="@_localizer["Server"]"
                                          Variant="Variant.Filled"
                                          OnlyValidateIfDirty="true"
                                          Clearable="true"
                                          Class="p-0 m-0"
                                          HelperText="@_localizer["Server url."]"
                                          For="@(() => Model.Server)" />
                        </MudItem>

                        <MudItem xs="6"
                                 Class="p-1 m-0">
                            <MudTextField @bind-Value="Model.Port"
                                          T="int"
                                          Label="@_localizer["Port"]"
                                          Variant="Variant.Filled"
                                          OnlyValidateIfDirty="true"
                                          Clearable="true"
                                          Class="p-0 m-0"
                                          HelperText="@_localizer["Provide secure websocket port."]"
                                          For="@(() => Model.Port)" />

                        </MudItem>
                        <MudItem xs="6"
                                 Class="p-1 m-0">
                            <MudTextField @bind-Value="Model.KeepAlive" T="int"
                                          Label="@_localizer["Keep Alive"]"
                                          Variant="Variant.Filled"
                                          OnlyValidateIfDirty="true"
                                          Clearable="true"
                                          Class="p-0 m-0"
                                          HelperText="@_localizer["Ping interval time in seconds."]"
                                          For="@(() => Model.KeepAlive)" />
                        </MudItem>
                        <MudItem xs="12"
                                 Class="p-1 m-0">
                            <MudTextField @bind-Value="Model.ClientId" T="string"
                                          Label="@_localizer["Client Id"]"
                                          Variant="Variant.Filled"
                                          OnlyValidateIfDirty="true"
                                          Clearable="true"
                                          Class="p-0 m-0"
                                          HelperText="@_localizer["Broker unique identifier."]"
                                          For="@(() => Model.ClientId)" />
                        </MudItem>

                        
                    </MudGrid>
                </MudForm>

                <MudForm @ref="@CredentialsForm"
                         Model="@CredentialsModel"
                         Validation="@(CredentialsValidator.ValidateValue)"
                         ValidationDelay="0"
                         Class="m-0 p-0 w-100">
                    <MudGrid Class="m-0 p-3 pt-0 w-100">
                        <MudItem xs="12"
                                 Class="p-1 m-0">
                            <MudSwitch @bind-Checked="ShowAuthorizationFields"
                                       Label="@_localizer["Is secured with password and username"]"
                                       Color="Color.Primary" />
                        </MudItem>

                        @if (ShowAuthorizationFields)
                        {
                            <MudItem xs="12"
                                     Class="p-1 m-0">
                                <MudTextField @bind-Value="CredentialsModel.Username"
                                              T="string"
                                              Label="@_localizer["Username"]"
                                              Variant="Variant.Filled"
                                              OnlyValidateIfDirty="true"
                                              Clearable="true"
                                              Class="p-0 m-0"
                                              For="@(() => CredentialsModel.Username)" />

                            </MudItem>

                            <MudItem xs="12"
                                     Class="p-1 m-0">
                                <MudTextField @bind-Value="CredentialsModel.Password"
                                              Label="@_localizer["Password"]"
                                              Variant="Variant.Filled"
                                              OnlyValidateIfDirty="true"
                                              Clearable="true"
                                              Class="p-0 m-0"
                                              For="@(() => CredentialsModel.Password)"
                                              InputType="@_passwordInput"
                                              Adornment="Adornment.End"
                                              AdornmentIcon="@_passwordInputIcon"
                                              OnAdornmentClick="TogglePasswordVisibility" />
                            </MudItem>
                        }
                    </MudGrid>
                </MudForm>

            </LoadedContent>
        </DialogLoading>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel"
                   Disabled="IsLoading">
            @_localizer["Cancel"]
        </MudButton>
        <MudButton OnClick="SubmitAsync"
                   Disabled="IsLoading"
                   Variant="Variant.Filled"
                   Color="Color.Primary">@_localizer["Submit"] </MudButton>
    </DialogActions>
</MudDialog>

@code
{
    [Parameter]
    public BrokerDTO Model { get; set; } = new();

    private BrokerCredentialsDTO CredentialsModel { get; set; } = new();
    private MudForm CredentialsForm = new();
    private BrokerValidator BrokerValidator = new();
    private BrokerCredentialsValidator CredentialsValidator = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Model.IsSSL = true;

        if (!string.IsNullOrEmpty(Model.Id))
        {
            var result = await _brokerService.GetBrokerCredentials(Model.Id);

            if (result.Succeeded)
            {
                CredentialsModel.Username = result.Data.Username;
                CredentialsModel.Password = result.Data.Password;

                if (!string.IsNullOrEmpty(CredentialsModel.Password) || !string.IsNullOrEmpty(CredentialsModel.Username))
                {
                    ShowAuthorizationFields = true;
                    StateHasChanged();
                }
            }
            else
            {
                _snackbar.Add(_localizer["Failed to fetch credentials, you will not be able to preview current values."], Severity.Error);
                _snackbar.Add(_localizer["Credentials will not be updated if no value provided."], Severity.Info);
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Form is not null && firstRender && Form.IsValid)
            StateHasChanged();

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task SubmitAsync()
    {
        if (IsLoading)
            return;

        await Form!.Validate();

        if (!Form.IsValid)
            return;

        if (!ShowAuthorizationFields || string.IsNullOrEmpty(CredentialsModel.Password) || string.IsNullOrEmpty(CredentialsModel.Username))
        {
            CredentialsModel.Password = null;
            CredentialsModel.Username = null;
        }

        await CredentialsForm!.Validate();

        if (!CredentialsForm.IsValid)
            return;

        IsLoading = true;

        IResult result = Result.Fail();

        if (string.IsNullOrEmpty(Model.Id))
            result = await _clientService.CreateClient(Model, CredentialsModel);
        else
            result = await _clientService.UpdateClient(Model, CredentialsModel);

        var success = RequestHelpers.InvokeAfterRequest(_snackbar, result, _localizer["Successfully updated broker."]);

        IsLoading = false;

        if (!success)
            return;

        Dialog!.Close(DialogResult.Ok(result));
    }


    #region Form

    private bool ShowAuthorizationFields { get; set; } = false;
    private bool _passwordVisibility;
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        if (_passwordVisibility)
        {
            _passwordVisibility = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _passwordVisibility = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    #endregion
}
