@using Presentation.Shared.Dialogs;

@inject IStringLocalizer<RemoveAccountDialog> _localizer
@inject IUserService _userService

@inherits BaseFormDialog

<MudDialog ClassContent="my-mud-dialog-content">
    <DialogContent>
        <LoadingDialog>
            <Title>
                <MudText Align="Align.Start"
                         Typo="Typo.h6">
                    @Title()
                </MudText>
            </Title>
            <Content>
                <MudForm @ref="@Form"
                         Model="@Model"
                         Class="p-0 pb-0 pt-0"
                         Validation="@(Validator.ValidateValue)"
                         ValidationDelay="0">
                    <MudGrid Class="p-0 m-0 w-100">
                        <MudItem xs="12">
                            <PasswordTextField @bind-Value="Model.Password"
                                          For="@(() => Model.Password)"
                                          Label="@_localizer["Password"]"
                                          HelperText="@_localizer["Provide password for your account."]" />
                        </MudItem>
                    </MudGrid>
                </MudForm>
            </Content>
            <Actions>
                <MudButton OnClick="Cancel" k>
                    @_localizer["Cancel"]
                </MudButton>
                <MudButton OnClick="RemoveAsync"
                           Variant="Variant.Filled"
                           Color="Color.Error">
                    @_localizer["Remove"]
                </MudButton>
            </Actions>
        </LoadingDialog>
    </DialogContent>
</MudDialog>

@code
{
    private PasswordConfirm Model = new();
    private PasswordConfirmValidator Validator = new();

    protected override string Title() => _localizer["Remove Account"];

    private async Task RemoveAsync()
    {
        var result = await _loadingService.InvokeDialogAsync(RemoveAction);

        if (result.Succeeded)
        {
            //TODO: Clear local data

            _snackbar.Add(_localizer["Thanks for using our app."], Severity.Info);

            _navigationManager.NavigateTo("/");
        }

        _snackbar.Add(_localizer["Failed to remove your account."], Severity.Error);
    }

    private async Task<IResult> RemoveAction()
    {
        await Form!.Validate();

        if (!Form.IsValid)
            return Result.Fail();

        var result = await _userService.RemoveAccount(Model);

        return result;
    }
}