@page "/user/settings"
@using Presentation.Users.Dialogs;
@using Presentation.Utils;

@inject IStringLocalizer<SettingsPage> _localizer;
@inject IUserService _userService

@inherits BasePage

<PageLoading FailedToLoad="!LoadedSuccessfully">
    <FailedToLoadContent>
        <RefreshPageButton RefreshPage="RefreshPage" />
    </FailedToLoadContent>
    <LoadedContent>
        <MudGrid Class="m-0 p-3 w-100">
            <MudItem xs="12" Class="p-0 m-0">
                <Breadcrumbs BreadcrumbItems="@BreadcrumbItems" />
            </MudItem>

            <MudItem xs="12" Class="d-flex p-0 m-0 justify-content-center">
                <MudCard Elevation="5" Class="p-3" Style="display: inline-block;">
                    <MudCardContent>
                        <MudGrid Class="d-flex justify-center">
                            <MudItem xs=12 Class="d-flex p-0 m-0 justify-content-center">
                                <MudAvatar Color="Color.Tertiary"
                                           Style="width:200px; height:200px;">
                                    <MudText Typo="Typo.h3">
                                        @User.Username[0]
                                    </MudText>
                                </MudAvatar>
                            </MudItem>

                            <MudItem xs=12 Class="d-flex p-0 m-0 mt-2 justify-content-center">
                                <MudText Typo="Typo.subtitle1">
                                    @User.Email
                                </MudText>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" Class="p-0 pt-4 pb-4 m-0">
                <MudProgressLinear Size="Size.Small" Color="Color.Tertiary" Rounded="true" Value="100" />
            </MudItem>

            <MudItem xs="12" Class="p-0 m-0">

                <MudForm>
                    <MudCard Elevation="5" Class="p-3 m-0">
                        <MudCardContent Class="p-0 m-0">
                            <MudGrid Class="p-0 m-0 w-100">
                                <MudItem Class="p-0 m-0 d-flex justify-content-center" xs="6" md="4">
                                    <MudSelect @bind-Value="Preferences.Theme"
                                               T="Theme"
                                               Label="Theme"
                                               Style="display: inline-block;"
                                               Class="p-1 m-0"
                                               For="(() => User.Theme)"
                                               HelperText="Default theme of application."
                                               Variant="Variant.Filled"
                                               AnchorOrigin="Origin.BottomCenter">
                                        <MudSelectItem Value="@Theme.Inherit">@_localizer["System preference"]</MudSelectItem>
                                        <MudSelectItem Value="@Theme.Dark">@_localizer["Dark mode"]</MudSelectItem>
                                        <MudSelectItem Value="@Theme.Light">@_localizer["Light mode"]</MudSelectItem>
                                    </MudSelect>
                                </MudItem>


                                <MudItem Class="p-0 m-0 d-flex justify-content-center" xs="6" md="4">
                                    <MudSelect @bind-Value="Preferences .Language"
                                               T="Language"
                                               Label="Language"
                                               Style="display: inline-block;"
                                               Class="p-1 m-0"
                                               For="(() => User.Language)"
                                               Variant="Variant.Filled"
                                               HelperText="Default language of application."
                                               AnchorOrigin="Origin.BottomCenter">

                                        <MudSelectItem Value="@Language.English">@_localizer["English"]</MudSelectItem>
                                    </MudSelect>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                        <MudCardActions>


                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       Class="m-0"
                                       OnClick="UpdateSettings">
                                @_localizer["Update Settings"]
                            </MudButton>

                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       Class="ml-2 m-0"
                                       OnClick="ChangePassword">
                                @_localizer["Change Password"]
                            </MudButton>

                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Error"
                                       Class="ml-2 m-0"
                                       OnClick="RemoveAccount">
                                @_localizer["Remove Account"]
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudForm>
            </MudItem>
        </MudGrid>
    </LoadedContent>
</PageLoading>

@code {

    public User User { get; set; } = new();
    private Preferences Preferences = new();

    public SettingsPage()
    {
        BreadcrumbItems = new()
        {
            new BreadcrumbItem("Settings", href: "/user/settings"),
        };
    }

    protected override async Task OnInitializedAsync()
    {
        await _loadingService.InvokeAsync(LoadPage);
        await base.OnInitializedAsync();
    }

    protected async Task RefreshPage()
    {
        await _loadingService.InvokeAsync(LoadPage);
    }

    protected async Task<IResult> LoadPage()
    {
        var result = await _userService.GetUser();

        if (result.Succeeded)
        {
            User = result.Data;
            Preferences = User.GetPreferences();
            LoadedSuccessfully = true;
        }

        return result;
    }

    protected async Task UpdateSettings()
    {
        await _loadingService.InvokeAsync(async() =>
        {
            var result = await _userService.UpdatePreferences(Preferences);

            RequestHelpers.InvokeAfterRequest(_snackbar, result, _localizer["Changed your settings."]);

            return result;
        });
    }

    public async Task ChangePassword()
    {
        var options = new DialogOptions()
            {
                NoHeader = true,
            };

        var dialog = await _dialogService.ShowAsync<ChangePasswordDialog>(_localizer["Change password"], options);
        var result = await dialog.Result;
    }

    public async Task RemoveAccount()
    {
        var options = new DialogOptions()
            {
                NoHeader = true,
            };
        var dialog = await _dialogService.ShowAsync<RemoveAccountDialog>(_localizer["Delete Account"], options);
        var result = await dialog.Result;
    }
}
