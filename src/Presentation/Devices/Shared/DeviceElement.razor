@using Presentation.Devices.Shared.DeviceStates
@using Presentation.Utils;

@inject IStringLocalizer<DeviceElement> _localizer

<MudPaper Class="m-0 p-0 rounded-4 animate-simple" Elevation="1">
    <MudExpansionPanel>
        <TitleContent>
            <MudElement Class="m-0 p-0 w-100 d-flex justify-content-start align-content-center" @onclick="HandleDeviceClick">
                <MudElement Class="m-0 p-2 d-flex justify-content-center align-items-center">
                    <MudPaper Elevation="5"
                              Class="m-0 p-1 rounded-5"
                              Style="@($"background-color: {GetBackgroundColor()};")">
                        <MudIcon Class="list-icon"
                                 Icon="@IconUtils.GetIcon(Device.Icon?.Name!)" />
                    </MudPaper>
                </MudElement>

                <MudElement Class="m-0 p-2  d-flex justify-content-start align-content-center">
                    <MudText Typo="Typo.h6" Class="hide-overlapping-text text-600" Style="font-weight: 500;">
                        @Device.Name
                    </MudText>
                </MudElement>
            </MudElement>
        </TitleContent>
        <ChildContent>
            <MudGrid Class="m-0 p-0">
                <MudItem Class="p-2 pb-0 pt-0 m-0">
                    <DeviceState Class="z-10 m-0 ml-2"
                                 Client="Client"
                                 Device="Device" />
                </MudItem>

                <MudItem Class="p-2 pb-0 pt-0 m-0">
                    <MudIconButton Class="z-10"
                                   Icon="@IconUtils.DefaultEditIcon"
                                   Variant="Variant.Filled"
                                   OnClick="() => DevicePagesUtils.UpdateDevice(Device, _dialogService)" />
                </MudItem>

                <MudItem Class="p-2 pb-0 pt-0  m-0">
                    <MudIconButton Class="z-10"
                                   Icon="@IconUtils.DefaultRemoveIcon"
                                   Variant="Variant.Filled"
                                   OnClick="() => DevicePagesUtils.RemoveDevice(Device, _dialogService, _navigationManager)" />
                </MudItem>
            </MudGrid>
        </ChildContent>
    </MudExpansionPanel>
</MudPaper>

@code
{
    //TODO uSED  Expansion panel

    [Parameter]
    public IClient Client { get; set; } = default!;
    [Parameter]
    public string DeviceId { get; set; } = string.Empty;

    private Device Device { get; set; } = default!;
    private bool IsExpanded { get; set; } = false;
    private string UnderNameText { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        Device = Client.GetDevices().First(x => x.Id == DeviceId);
        UnderNameText = _localizer["Show Actions"];
    }

    protected override void OnParametersSet()
    {
        try
        {
            var device = Client.GetDevices().First(x => x.Id == DeviceId);
            Device = device;
            StateHasChanged();
        }
        catch { }
        base.OnParametersSet();
    }

    public string GetBackgroundColor() => string.IsNullOrEmpty(Device.Icon.BackgroundHex) ? ThemeColors.ColorPrimary : Device.Icon.BackgroundHex;

    public void HandleDeviceClick()
    {
        _navigationManager.NavigateTo($"/devices/{DeviceId}/client/{Client.Id}");
    }

    public void HandleExpand()
    {

        if (IsExpanded)
        {
            IsExpanded = false;
            UnderNameText = _localizer["Show Actions"];
        }
        else
        {
            UnderNameText = _localizer["Hide Actions"];
            IsExpanded = true;
        }
    }
}
