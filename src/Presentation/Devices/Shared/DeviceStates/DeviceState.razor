@using Presentation.Shared.Dialogs;
@using Presentation.Utils;


@inject IStringLocalizer<DeviceState> _localizer

@if (Condition == DeviceCondition.None)
{
    <MudIconButton Variant="Variant.Filled"
               Class="@Class"
               Icon="@Icons.Material.Filled.CloudOff"
               OnClick="NotAvaliableToast"
               Color="Color.Warning">
    </MudIconButton>
}
else
{
    <MudIconButton Variant="Variant.Filled"
               Class="@Class"
               Style="@($"border: 1px solid {GetBorderBackgroundColor()}; background-color: {GetBackgroundColor()};")"
               Icon="@GetIcon()"
               OnClick="ActionAsync">
    </MudIconButton>
}

@code
{
    [Parameter]
    public string Class { get; set; } = string.Empty;
    [Parameter]
    public IClient? Client { get; set; }
    [Parameter]
    public Device? Device { get; set; }
    [Parameter]
    public Action? RerenderPage { get; set; }

    [CascadingParameter]
    protected MudTheme? AppTheme { get; set; }
    [CascadingParameter]
    protected bool IsDarkMode { get; set; }

    private Control Control { get; set; } = new();
    private DeviceCondition Condition = DeviceCondition.None;
    private string Value { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var control = Client!.GetControls(Device!.Id)
            .FirstOrDefault(x => x.Type == ControlType.State);

        if (control is null)
            return;

        Control = control;
        Value = await Client!.TopicService.LastMessageOnTopicAsync(Client!.Id, Device!, Control!);

        if (Control!.Attributes!.OffPayload == Value)
            Condition = DeviceCondition.Off;
        else if (Control!.Attributes!.OnPayload == Value)
            Condition = DeviceCondition.On;
        else
            Condition = DeviceCondition.Unknown;
    }

    public void Update()
    {

        var control = Client!.GetControls(Device!.Id)
            .FirstOrDefault(x => x.Type == ControlType.State);

        if (control is null)
        {
            Condition = DeviceCondition.None;
            return;
        }

        Control = control;

        if (Control!.Attributes!.OffPayload == Value)
            Condition = DeviceCondition.Off;
        else if (Control!.Attributes!.OnPayload == Value)
            Condition = DeviceCondition.On;
        else
            Condition = DeviceCondition.Unknown;
    }

    public string GetBackgroundColor()
    {
        if (!Control!.IsAvailable)
        {
            var background = AppTheme!.Palette.DrawerBackground;
            if (IsDarkMode)
                background = AppTheme!.PaletteDark.DrawerBackground;

            background.SetAlpha(background.A * 0.5);
            return background.ToString();
        }

        Value = Client!.TopicService.LastMessageOnTopic(Client!.Id, Device!, Control!);

        if (Control!.Attributes!.OffPayload == Value)
        {
            var color = IsDarkMode ? AppTheme!.PaletteDark.Error : AppTheme!.Palette.Error;
            return color.SetAlpha(128).ToString();
        }
        else if (Control!.Attributes!.OnPayload == Value)
        {
            var color = IsDarkMode ? AppTheme!.PaletteDark.Success : AppTheme!.Palette.Success;
            return color.SetAlpha(128).ToString();
        }

        return $"{Control!.Icon.BackgroundHex}80";
    }

    public string GetBorderBackgroundColor()
    {
        if (!Control!.IsAvailable)
        {
            if (IsDarkMode)
                return AppTheme!.PaletteDark.Error.ToString();

            return AppTheme!.Palette.Error.ToString();
        }

        Value = Client!.TopicService.LastMessageOnTopic(Client!.Id, Device!, Control!);

        if (Control!.Attributes!.OffPayload == Value)
            return $"{(IsDarkMode ? AppTheme!.PaletteDark.Error : AppTheme!.Palette.Error)}";
        else if (Control!.Attributes!.OnPayload == Value)
            return $"{(IsDarkMode ? AppTheme!.PaletteDark.Success : AppTheme!.Palette.Success)}";

        return Control!.Icon.BackgroundHex;
    }

    public string GetIcon()
    {
        if (Control!.Attributes!.OffPayload == Value)
            return Icons.Material.Filled.CloudQueue;
        else if (Control!.Attributes!.OnPayload == Value)
            return Icons.Material.Filled.Cloud;

        return IconUtils.GetIcon(Control.Icon.Name);
    }

    public async Task ActionAsync()
    {
        if (!Control!.IsAvailable)
        {
            _snackbar.Add(_localizer["Hey, this control is currently off!"]);
            return;
        }

        var parameters = new DialogParameters<StateDialog>
        {
            { x => x.Control, Control },
            { x => x.Client, Client },
            { x => x.RerenderPage, RerenderPage}
        };

        var dialog = await _dialogService!.ShowAsync<StateDialog>(_localizer["Device state"], parameters);
        var result = await dialog.Result;

        if (result.Canceled)
        {
            Update();
            return;
        }

        var onPayload = Convert.ToBoolean(result.Data);

        if (Control!.IsConfiramtionRequired)
        {
            var confirmationParameters = new DialogParameters<ConfirmDialog>
            {
                { x => x.Description, _localizer["Sending this message requires confirmation."] }
            };

            var options = new DialogOptions { NoHeader = true };

            var confirmationDialog = await _dialogService!.ShowAsync<ConfirmDialog>(_localizer["Confirmation Required"], confirmationParameters, options);
            var confirmationResult = await confirmationDialog.Result;

            if (confirmationResult.Canceled)
                return;

            bool confirmed = Convert.ToBoolean(confirmationResult.Data);

            if (!confirmed)
                return;
        }

        var topic = Control!.GetTopic(Device!);
        var payload = Control.Attributes.OffPayload;

        if (onPayload)
        {
            payload = Control.Attributes.OnPayload;
        }

        Value = payload!;

        await Client!.PublishAsync(topic, payload!, Control!.QualityOfService);

        StateHasChanged();
    }

    public void NotAvaliableToast()
    {
        _snackbar.Add(_localizer["This device doesn't have state control."], Severity.Warning);
    }
}

