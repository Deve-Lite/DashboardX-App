@page "/devices/{DeviceId}/client/{ClientId}"
@using Presentation.Brokers
@using Presentation.Controls.Dialogs
@using Presentation.Controls
@using Presentation.Devices.Shared.DeviceStates
@using Presentation.Utils;

@inject IClientService _clientService
@inject NavigationManager _navigationManager
@inject IStringLocalizer<DevicePage> _localizer

@implements IDisposable

@inherits BasePage

<PageLoading FailedToLoad="!LoadedSuccessfully">
    <FailedToLoadContent>
        <RefreshPageButton RefreshPage="RefreshPage" />
    </FailedToLoadContent>
    <LoadedContent>

        <AddButton OnClick="AddControl"
                   Class="add-wrapper" />

        <MudGrid Class="m-0 p-3 w-100">
            <MudItem xs="12" Class="p-0 m-0">
                <Breadcrumbs BreadcrumbItems="@BreadcrumbItems" />
            </MudItem>

            <MudItem xs="12"
                     Class="p-0 m-0 pt-3 pb-3 mud-w-auto">
                <MudCard Elevation="5"
                         Class="m-0 p-4 rounded-2">
                    <MudCardContent Class="p-0 m-0">
                        <MudGrid Class="m-0 p-0 w-100">
                            <MudItem xs="12">
                                <MudText Typo="Typo.h6" Align="Align.Center"> @Device.Name</MudText>
                            </MudItem>

                            <MudItem xs="6" sm="5" md="4" lg="3" xl="2" Class="m-0 p-1">
                                <MudText Typo="Typo.button" Class="p-1 pl-0 m-0">
                                    @_localizer["Placing"]
                                </MudText>
                                <MudText Class="hide-overlapping-text">
                                    @Device.Placing
                                </MudText>
                            </MudItem>

                            <MudItem xs="6" sm="5" md="4" lg="3" xl="2" Class="m-0 p-1">
                                <MudText Typo="Typo.button" Class="p-1 pl-0 m-0">
                                    @_localizer["Base Path"]
                                </MudText>
                                <MudText Class="hide-overlapping-text">
                                    @(string.IsNullOrEmpty(Device.BaseDevicePath) ? _localizer["Base path not provided."] : Device.BaseDevicePath)
                                </MudText>
                            </MudItem>

                            <MudItem xs="6" sm="5" md="4" lg="3" xl="2" Class="m-0 p-1">
                                <MudText Typo="Typo.button" Class="p-1 pl-0 m-0">
                                    @_localizer["Broker"]
                                </MudText>
                                <MudText Class="hide-overlapping-text">
                                    @Client!.GetBroker().Name
                                </MudText>
                            </MudItem>

                            <MudItem xs="6" sm="5" md="4" lg="3" xl="2" xxl="1" Class="m-0 p-1">
                                <MudText Typo="Typo.button" Class="p-1 pl-0 m-0">
                                    @_localizer["Keep Alive"]
                                </MudText>

                                <MudText Class="hide-overlapping-text">
                                    @Client!.GetBroker().KeepAlive
                                </MudText>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>

                    <MudItem xs="12" Class="p-0 pt-2 pb-2 m-0">
                        <MudProgressLinear Size="Size.Small" Color="Color.Tertiary" Rounded="true" Value="100" />
                    </MudItem>

                    <MudCardActions Class="p-0 m-0">
                        <MudGrid Class="m-0 p-0 pt-2">
                            <MudItem Class="p-2 pb-0 pl-0 pt-0 m-0">
                                <DeviceState @ref="State"
                                             Class="z-10 m-0"
                                             Client="@Client"
                                             Device="@Device"
                                             RerenderPage="StateHasChanged" />
                            </MudItem>

                            <MudItem Class="p-2 pb-0 pt-0 m-0">
                                <MudIconButton Class="z-10"
                                               Icon="@IconUtils.DefaultEditIcon"
                                               Variant="Variant.Filled"
                                               OnClick="() => DevicePagesUtils.UpdateDevice(Device, _dialogService)" />

                            </MudItem>

                            <MudItem Class="p-2 pb-0 pt-0 m-0">
                                <MudIconButton Class="z-10"
                                               Icon="@IconUtils.DefaultRemoveIcon"
                                               Variant="Variant.Filled"
                                               OnClick="() => DevicePagesUtils.RemoveDevice(Device, _dialogService, _navigationManager)" />

                            </MudItem>
                        </MudGrid>
                    </MudCardActions>
                </MudCard>
            </MudItem>

            <MudItem xs="12" Class="p-0 pt-4 pb-4 m-0">
                <MudProgressLinear Size="Size.Small" Color="Color.Tertiary" Rounded="true" Value="100" />
            </MudItem>

            <MudItem xs="12" Class="p-0 pt-4 pb-4 m-0 d-flex">

                <MudElement Class="p-1 m-0 w-100 flex-list-justify">
                    @foreach (var control in Client!.GetControls(DeviceId).Where(x => x.Type != ControlType.State))
                    {
                        <MudItem Class="p-1 m-0">
                            <ControlFactory Client="@Client"
                                            Device="@Device"
                                            Control="@control"
                                            RefreshList="StateHasChanged" />
                        </MudItem>
                    }
                </MudElement>
            </MudItem>
        </MudGrid>
    </LoadedContent>
</PageLoading>

@code
{
    [Parameter]
    public string DeviceId { get; set; } = string.Empty;
    [Parameter]
    public string ClientId { get; set; } = string.Empty;

    private IClient? Client { get; set; }
    private Device Device { get; set; } = new();
    private DeviceState? State;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await _loadingService.InvokeAsync(LoadPage);
    }

    protected async Task RefreshPage()
    {
        await _loadingService.InvokeAsync(LoadPage);
    }

    protected async Task<IResult> LoadPage()
    {
        var result = await _clientService.GetClient(ClientId);

        if (result.Succeeded)
        {
            Client = result.Data;
            Client.SetOnMessageReceivedEventHandler(RerenderPage);
            LoadedSuccessfully = true;
            Device = Client.GetDevices().FirstOrDefault(x => x.Id == DeviceId)!;
        }
        else
        {
            LoadedSuccessfully = false;
        }

        if (result.ShowToast)
            foreach (var message in result.Messages)
                _snackbar.Add(message, result.Severity);

        BreadcrumbItems = new()
        {
            new BreadcrumbItem("Brokers", href: "/brokers"),
            new BreadcrumbItem($"{Client!.GetBroker().Name}", href: $"/brokers/{Client!.GetBroker().Id}"),
            new BreadcrumbItem($"{Device.Name}", href: $"devices/{Device.Id}/client/{Client!.GetBroker().Id}", true),
        };

        return result;
    }

    protected async Task AddControl()
    {
        await ControlPagesUtils.AddControl(_dialogService, DeviceId, ClientId);

        State!.Update();
    }

    public void Dispose()
    {
        Client!.ClearOnMessageReceivedEventHandler();
    }
}
