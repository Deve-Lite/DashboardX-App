@page "/devices"
@using Presentation.Controls.Implementations.StateComponents
@using Presentation.Utils;
@using Presentation.Controls.Implementations;
@inject IClientService _clientService
@inject IStringLocalizer<DeviceListPage> _localizer

@inherits BasePage

<PageLoading FailedToLoad="!LoadedSuccessfully">
    <FailedToLoadContent>
        <RefreshPageButton RefreshPage="LoadPage" />
    </FailedToLoadContent>
    <LoadedContent>
        <MudGrid Class="m-0 p-3 w-100">

            <MudItem xs="7" Class="p-0 pt-3 pb-3 m-0">

            </MudItem>

            <MudItem xs="5" Class="d-flex p-0 pt-3 pb-3 m-0 justify-content-end">

                <MudButton OnClick="() => DevicePagesUtils.AddDevice(StateHasChanged, _dialogService, _localizer)"
                           Color="Color.Primary"
                           Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.AddToQueue">
                    @_localizer["Add Device"]
                </MudButton>

            </MudItem>

            <MudItem Class="p-0 pt-2" xs="12">
                <MudList Class="p-0 w-100"
                         Dense="true"
                         Clickable="true">

                    <MudListSubheader Class="d-flex p-0 m-0">
                        <MudGrid Class="p-0 m-0">
                            <MudItem xs="1" Class="d-flex p-1 m-0">

                            </MudItem>
                            <MudItem xs="2" Class="d-flex p-1 m-0 align-items-center justify-content-start">
                                <MudText Typo="Typo.h6">
                                    @_localizer["Name"]
                                </MudText>
                            </MudItem>
                            <MudItem xs="2" Class="d-flex p-1 m-0 align-items-center justify-content-start">
                                <MudText Typo="Typo.h6">
                                    @_localizer["Placing"]
                                </MudText>
                            </MudItem>
                            <MudItem xs="2" Class="d-flex p-1 m-0 align-items-center justify-content-start">
                                <MudText Typo="Typo.h6">
                                    @_localizer["Broker"]
                                </MudText>
                            </MudItem>
                            <MudItem xs="3" Class="d-flex p-1 m-0 align-items-center justify-content-center">
                                <MudText Typo="Typo.h6">
                                    @_localizer["State"]
                                </MudText>
                            </MudItem>
                            <MudItem xs="2"> </MudItem>
                        </MudGrid>

                    </MudListSubheader>

                    <MudProgressLinear Size="Size.Small" Color="Color.Primary" Rounded="true" Value="100" />

                    @foreach (var client in Clients)
                        @foreach (var device in client.Devices)
                        {
                            <MudListItem Class="d-flex m-0 p-0 pt-1 pb-1 align-items-center justify-content-center"
                                         Href="@($"/devices/{device.Id}/{client.Id}")">

                                <MudGrid Class="w-100 p-0 m-0">
                                    <MudItem xs="1" Class="d-flex p-0 m-0 align-items-center justify-content-center">

                                        <IconForList Icon="@device.Icon"
                                                     IconSize="Size.Medium" />
                                    </MudItem>
                                    <MudItem xs="2" Class="d-flex m-0 p-0 align-items-center justify-content-start">
                                        <MudText Class="hide-overlapping-text">
                                            @device.Name
                                        </MudText>
                                    </MudItem>
                                    <MudItem xs="2" Class="d-flex m-0 p-0 align-items-center justify-content-start">
                                        <MudText Class="hide-overlapping-text">
                                            @device.Placing
                                        </MudText>
                                    </MudItem>
                                    <MudItem xs="2" Class="d-flex m-0 p-0 align-items-center justify-content-start">
                                        <MudText Class="hide-overlapping-text">
                                            @client.Broker.Name
                                        </MudText>
                                    </MudItem>
                                    <MudItem xs="3" Class="d-flex m-0 p-0 align-items-center justify-content-center">
                                        <StateControl Client="client"
                                                      Device="device"
                                                      RerenderPage="StateHasChanged" />
                                    </MudItem>
                                    <MudItem xs="2" Class="d-flex m-0 p-0 align-items-center justify-content-evenly">
                                        <MudIconButton Class="z-10"
                                                       Icon="@IconUtils.DefaultEditIcon"
                                                       OnClick="() => DevicePagesUtils.UpdateDevice(device, _dialogService, StateHasChanged, _localizer)">

                                        </MudIconButton>

                                        <MudIconButton Class="z-10"
                                                       Icon="@IconUtils.DefaultRemoveIcon"
                                                       OnClick="() => DevicePagesUtils.RemoveDevice(device, _dialogService, _localizer, _navigationManager, _runtime)">

                                        </MudIconButton>
                                    </MudItem>
                                </MudGrid>
                            </MudListItem>

                            <MudProgressLinear Size="Size.Small" Color="Color.Primary" Rounded="true" Value="0" />
                        }
                </MudList>
            </MudItem>
        </MudGrid>
    </LoadedContent>
</PageLoading>

@code
{
    private List<IClient> Clients { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadPage();
        await base.OnInitializedAsync();
    }

    public async Task LoadPage()
    {
        if (_loadingService.IsLoading)
            return;

        _loadingService.ShowLoading();

        var result = await _clientService.GetClientsWithDevices();

        if (result.Succeeded)
        {
            Clients = result.Data;
            LoadedSuccessfully = true;
        }
        else
        {
            LoadedSuccessfully = false;
        }

        if (result.ShowToast)
            foreach (var message in result.Messages)
                _snackbar.Add(message, result.Severity);

        _loadingService.HideLoading();

        StateHasChanged();
    }
}