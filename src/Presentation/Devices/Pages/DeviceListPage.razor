@page "/devices"
@using Presentation.Utils;
@using Presentation.Controls.Implementations;
@using Presentation.Devices.Shared;
@inject IClientService _clientService
@inject IStringLocalizer<DeviceListPage> _localizer

@inherits BasePage

@implements IDisposable

<PageLoading  FailedToLoad="!LoadedSuccessfully">
    <FailedToLoadContent>
        <RefreshPageButton RefreshPage="RefreshPage" />
    </FailedToLoadContent>
    <LoadedContent>

        <AddButton OnClick="CreateDevice"
                   Class="add-wrapper"/>

        <MudGrid Class="m-0 p-3 w-100">

            <MudItem xs="12" Class="p-0 m-0">
                <Breadcrumbs BreadcrumbItems="@BreadcrumbItems" />
            </MudItem>

            @foreach(var client in Clients.Where(x => x.GetDevices().Any()))
            {
                <MudItem xs="12" lg="6" Class="p-0 m-0">

                    <MudText Align="Align.Left" Typo="Typo.h5" Class="hide-overlapping-text">
                        @client.GetBroker().Name
                    </MudText>

                    <MudProgressLinear Size="Size.Small" Color="Color.Primary" Rounded="true" Value="100"/>

                    <MudGrid Class="p-0 pt-2 m-0 w-100">

                        @foreach (var device in client.GetDevices())
                        {
                            <MudItem xs="12" sm="6" md="4" lg="6" xl="4" xxl="3" Class="p-1 m-0">
                                <DeviceElement Client="@client" DeviceId="@device.Id"/>
                            </MudItem>
                        }

                    </MudGrid>
                </MudItem>
            }
        </MudGrid>
    </LoadedContent>
</PageLoading>

@code
{
    private IList<IClient> Clients { get; set; } = new List<IClient>();

    public DeviceListPage()
    {
        BreadcrumbItems = new()
        {
            new BreadcrumbItem("Devices", href: "/devices"),
        };
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await _loadingService.InvokeAsync(LoadPage);
    }

    protected async Task RefreshPage()
    {
        await _loadingService.InvokeAsync(LoadPage);
    }

    protected async Task<IResult> LoadPage()
    {
        var result = await _clientService.GetClientsWithDevices();

        if (result.Succeeded)
        {
            Clients = result.Data;

            foreach (var client in Clients)
                client.SetOnMessageReceivedEventHandler(RerenderPage);

            LoadedSuccessfully = true;
        }
        else
        {
            LoadedSuccessfully = false;
            if (result.ShowToast)
                _snackbar.Add(result.Messages[0], result.Severity);
        }

        return result;
    }

    public async Task CreateDevice()
    {
        if (Clients.Count == 0)
        {
            _snackbar.Add(_localizer["First create broker!"], Severity.Info);
            return;
        }

        await DevicePagesUtils.AddDevice(_dialogService);
    }

    public void Dispose()
    {
        foreach (var client in Clients)
            client?.ClearOnMessageReceivedEventHandler();
    }
}