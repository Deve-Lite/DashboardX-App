@inject IStringLocalizer<UpsertDeviceDialog> _localizer;
@inject IClientService _clientService
@inject IBrokerService _brokerService

<MudDialog>
    <DialogContent>
        <DialogLoading IsLoading="IsLoading">
            <LoadedContent>
                <MudForm @ref="@form"
                         Model="@Model"
                         Validation="@(DeviceValidator.ValidateValue)"
                         ValidationDelay="0"
                         Class="m-0 p-0 w-100">
                    <MudGrid Class="m-0 p-3 w-100">

                        <MudItem xs="3"
                                 Class="p-1 m-0">
                            <IconSelector @bind-Icon="@Model.Icon.Name"
                                          Label="Icon" />
                        </MudItem>

                        <MudItem xs="9"
                                 Class="p-1 m-0">
                            <ColorSelector @bind-Value="@Model.Icon.BackgroundHex"
                                           Label="Device Theme" />
                        </MudItem>

                        <MudItem xs="12"
                                 Class="p-1 m-0">
                            <MudTextField @bind-Value="Model.Name"
                                          T="string"
                                          Label="@_localizer["Name"]"
                                          Variant="Variant.Filled"
                                          OnlyValidateIfDirty="true"
                                          Clearable="true"
                                          Class="p-0 m-0"
                                          HelperText="@_localizer["Provide meaningful name."]"
                                          For="@(() => Model.Name)" />
                        </MudItem>

                        <MudItem xs="12"
                                 Class="p-1 m-0">
                            <MudSelect @bind-Value="Model.BrokerId"
                                       xs="12"
                                       T="string"
                                       Class="p-0 m-0"
                                       HelperText="@_localizer["Select device broker"]"
                                       Label="@_localizer["Broker"]"
                                       For="(() => Model.BrokerId)"
                                       Variant="Variant.Filled"
                                       AnchorOrigin="Origin.BottomCenter">
                                @foreach (var data in AvaliableBrokers)
                                {
                                    <MudSelectItem Value="@data.Id">@data.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>

                        <MudItem xs="12"
                                 Class="p-1 m-0">

                            <MudTextField @bind-Value="Model.Placing"
                                          T="string"
                                          Label="@_localizer["Placing"]"
                                          Variant="Variant.Filled"
                                          OnlyValidateIfDirty="true"
                                          Clearable="true"
                                          Class="p-0 m-0"
                                          For="@(() => Model.Placing)"
                                          HelperText="@_localizer["Placing of device."]" />

                        </MudItem>

                        <MudItem xs="12"
                                 Class="p-1 m-0">
                            <MudTextField @bind-Value="Model.BaseDevicePath"
                                          T="string"
                                          Label="@_localizer["Base device path"]"
                                          Variant="Variant.Filled"
                                          OnlyValidateIfDirty="true"
                                          Clearable="true"
                                          Class="p-0 m-0"
                                          HelperText="@_localizer["Path combined with broker path {brokerPath}{DevicePath}."]"
                                          For="@(() => Model.BaseDevicePath)" />

                        </MudItem>
                    </MudGrid>
                </MudForm>
            </LoadedContent>
        </DialogLoading>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@_localizer["Cancel"]</MudButton>
        <MudButton form="upsertBrokerForm"
                   OnClick="SubmitAsync"
                   Variant="Variant.Filled"
                   Color="Color.Primary">@_localizer["Submit"] </MudButton>
    </DialogActions>
</MudDialog>

@code
{
    [CascadingParameter]
    private MudDialogInstance? Dialog { get; set; }

    [Parameter]
    public DeviceDTO Model { get; set; } = new();

    [Parameter]
    public string ClientId { get; set; } = string.Empty;

    private DeviceValidator DeviceValidator = new();
    private List<Broker> AvaliableBrokers = new();
    private MudForm? form;

    public bool IsLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var result = await _brokerService.GetBrokers();

        if (result.Succeeded)
        {
            AvaliableBrokers = result.Data;
            StateHasChanged();
        }
        else
            Dialog!.Close(DialogResult.Ok(Result.Fail(result.StatusCode, _localizer["Failed to load brokers."])));

        await base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (form is not null && firstRender && form.IsValid)
            StateHasChanged();

        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task SubmitAsync()
    {
        if (IsLoading)
            return;

        await form!.Validate();

        if (!form.IsValid)
            return;

        IsLoading = true;

        var result = Result<Device>.Fail();

        if (string.IsNullOrEmpty(Model.Id))
            result = await _clientService.CreateDeviceForClient(Model);
        else
        {
            result = await _clientService.UpdateDeviceForClient(Model);
        }

        var success = RequestHelpers.InvokeAfterRequest(_snackbar, result, OnAdded);

        IsLoading = false;

        if (!success)
            return;

        Dialog!.Close(DialogResult.Ok(result));
    }

    private void Cancel() 
        => Dialog!.Cancel();

    private void OnAdded() 
        => _snackbar.Add(_localizer["Success"], MudBlazor.Severity.Success);
    
}