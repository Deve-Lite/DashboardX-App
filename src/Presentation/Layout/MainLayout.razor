@using Presentation.Utils;
@using Presentation.Extensions;
@using Presentation.Layout.PlatformLayouts;

@inject AuthenticationStateProvider _authenticationStateProvider
@inject IStringLocalizer<MainLayout> _localizer
@inject ILocalStorageService _localStorage
@inject IPrefrenceService _preferenceService
@inject IClientService _clientService

@inherits LayoutComponentBase

@implements IBrowserViewportObserver
@implements IAsyncDisposable

<MudLayout Class="p-0 m-0 w-100 h-100">
    <MudThemeProvider IsDarkMode="@IsDarkMode" @ref="_mudThemeProvider" Theme="@AppTheme" />
    <MudSnackbarProvider />
    <MudDialogProvider />

    <CascadingValue Value="@AppTheme">
        <CascadingValue Value="@IsDarkMode">
            <AuthorizeView Roles="@($"{RolesConstraints.User}, {RolesConstraints.Admin}")">
                <Authorized>

                    <MudHidden Breakpoint="Breakpoint.SmAndUp">

                        <MobileLayout Body="@Body" />
                    </MudHidden>

                    
                    <MudHidden Breakpoint="Breakpoint.MdAndDown">
                        <DesktopLayout Body="@Body" />
                    </MudHidden>

                    
                    <MudHidden Breakpoint="Breakpoint.Xs">
                        <MudHidden Breakpoint="Breakpoint.LgAndUp">

                            <TabletLayout Body="@Body" />
                        </MudHidden>
                    </MudHidden>


                    @* 
                        //TODO: REMOVE BROWSER EVENTS!! AND MY EXTENSIONS
                        //TODO: Think of extracting generating Body from navigation elements because this causes reredner of body
                        
                    @if (_width <= 600)
                    {
                        <MobileLayout Body="@Body" />
                    }
                    else if (_width >=1280)
                    {
                        <DesktopLayout Body="@Body" />
                    }
                    else
                    {
                        <TabletLayout Body="@Body" />
                    }*@
                </Authorized>
                <NotAuthorized>
                    <MudItem Class="image-in-background">
                        <MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-items-center bg-transparent" Style="height: 100vh;">
                            @Body
                        </MudContainer>
                    </MudItem>
                </NotAuthorized>
            </AuthorizeView>
        </CascadingValue>
    </CascadingValue>
</MudLayout>



@code {

    [Inject]
    private IBrowserViewportService BrowserViewportService { get; set; }

    /// <summary>
    /// Fixes problem of missing styles.
    /// </summary>
    private string Margin { get; set; } = "var(--mud-drawer-width-left)";
    private bool IsOpen { get; set; } = false;
    private bool IsDesktop { get; set; } = false;
    private bool IsLoading { get; set; } = false;
    private DrawerVariant DrawerMode { get; set; } = DrawerVariant.Temporary;
    private Anchor Anchor { get; set; } = Anchor.Left;
    private MudThemeProvider _mudThemeProvider = new();
    private Platform Platform { get; set; } = Platform.Desktop;

    public MudTheme AppTheme { get; set; } = ThemeColors.AppTheme;
    public bool IsDarkMode { get; set; } = false;
    public int _width { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await BrowserViewportService.SubscribeAsync(this, fireImmediately: true);
        }

        await base.OnAfterRenderAsync(firstRender);
    }


    protected override async Task OnInitializedAsync()
    {
        BrowserResizeExtensions.OnResize += BrowserResized;
        _preferenceService.OnPreferenceChange = async (preferences) =>
        {
            try
            {
                if (Theme.Inherit == preferences.Theme)
                {
                    var deviceMode = await _mudThemeProvider!.GetSystemPreference();
                    IsDarkMode = deviceMode;
                }
                else if (Theme.Light == preferences.Theme)
                    IsDarkMode = false;
                else
                    IsDarkMode = true;
            }
            catch
            {
                IsDarkMode = false;
            }
        };

        await _runtime.SubscribeToResizeEvent();
        await BrowserResized(await _runtime.GetScreenWidth());
        await _preferenceService.LoadPreferences();
        await _mudThemeProvider!.WatchSystemPreference(OnSystemPreferenceChanged);
    }
    public Guid Id { get; } = Guid.NewGuid();

    public ResizeOptions ResizeOptions => new()
        {
            ReportRate = 50,
            NotifyOnBreakpointOnly = true
        };

    public Task NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs browserViewportEventArgs)
    {
        _width = browserViewportEventArgs.BrowserWindowSize.Width;

        return InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        BrowserResizeExtensions.OnResize -= BrowserResized;
        await BrowserViewportService.UnsubscribeAsync(this);
        await _runtime.UnsubscribeToResizeEvent();
    }

    private async Task OnSystemPreferenceChanged(bool newValue)
    {
        IsDarkMode = newValue;
        await InvokeAsync(StateHasChanged);
    }

    private async Task Logout()
    {
        var applicationAuthorization = (_authenticationStateProvider as ApplicationStateProvider)!;

        await applicationAuthorization.Logout();
        await _localStorage.RemoveItemAsync(BrokerConstraints.BrokerListName);
        await _localStorage.RemoveItemAsync(DeviceConstants.DevicesListName);
        await _localStorage.RemoveItemAsync(UserConstraints.PreferencesStorage);
        //TODO: Reset Preferences
        await _clientService.Logout();
    }

    private void ToggleDrawer()
    {
        if (Platform == Platform.Mobile)
        {
            IsOpen = !IsOpen;
            IsDesktop = false;
        }
    }

    private async Task BrowserResized(int width)
    {
        if (JsRuntimeExtensions.IsDektop(width))
        {
            DrawerMode = DrawerVariant.Responsive;
            Platform = Platform.Desktop;
            Anchor = Anchor.Left;
            IsOpen = true;
            Margin = "var(--mud-drawer-width-left)";
        }
        else if (JsRuntimeExtensions.IsMobile(width))
        {
            DrawerMode = DrawerVariant.Responsive;
            Platform = Platform.Mobile;
            Anchor = Anchor.Right;
            IsOpen = false;
            Margin = "0px;";
        }
        else
        {
            DrawerMode = DrawerVariant.Mini;
            Platform = Platform.Tablet;
            Anchor = Anchor.Left;
            IsOpen = false;
            Margin = "var(--mud-drawer-width-mini-left)";
        }

        await InvokeAsync(StateHasChanged);
    }

    private void NavigateToBrokers() => NavigateToPage("/brokers");

    private void NavigateToDevices() => NavigateToPage("/devices");

    private void NavigateToSubs() => NavigateToPage("/statistics/subscribtions");

    private void NavigateToProfile() => NavigateToPage("/user/settings");

    private void NavigateToPage(string page)
    {
        _navigationManager.NavigateTo(page);

        if (Platform == Platform.Mobile)
            IsOpen = false;
    }
}