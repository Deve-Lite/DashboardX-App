@using Presentation.Utils;
@using Presentation.Extensions;

@inject AuthenticationStateProvider _authenticationStateProvider
@inject IStringLocalizer<MainLayout> _localizer
@inject ILocalStorageService _localStorage
@inject IPrefrenceService _preferenceService
@inject IClientService _clientService

@inherits LayoutComponentBase

@implements IAsyncDisposable

<MudLayout Class="p-0 m-0 w-100 h-100">
    <MudThemeProvider IsDarkMode="@IsDarkMode" @ref="_mudThemeProvider" Theme="@AppTheme" />
    <MudSnackbarProvider />
    <MudDialogProvider />

    <CascadingValue Value="@AppTheme">
        <CascadingValue Value="@IsDarkMode">
            <AuthorizeView Roles="@($"{RolesConstraints.User}, {RolesConstraints.Admin}")">
                <Authorized>
                    @*TODO: It might be better to create per Platform AppBar*@
                    <MudAppBar DisableGutters="true" Elevation="1" Dense="@true" Color="Color.Primary" Style="padding-left: 16px; padding-right: 16px; margin-left: 0px; margin-right: 0px;">

                        <MudText Color="Color.Secondary" Typo="Typo.h6" Style="padding: 0px">
                            @_localizer["DashboardX"]
                        </MudText>

                        <MudSpacer />

                        @if (Platform == Platform.Mobile)
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Menu"
                                       Disabled="@IsDesktop"
                                       Color="Color.Secondary"
                                       Edge="Edge.Start"
                                       OnClick="@ToggleDrawer" />
                        }

                    </MudAppBar>
                    <MudDrawer @bind-Open="@IsOpen"
                               ClipMode="DrawerClipMode.Always"
                               Anchor="@Anchor"
                               Width="200px"
                               Variant="@DrawerMode"
                               Elevation="1">

                        <MudNavMenu Class="pt-2">
                            <MudNavLink Icon="@Icons.Material.Filled.DisplaySettings"
                                        OnClick="NavigateToBrokers">
                                @_localizer["Brokers"]
                            </MudNavLink>

                            <MudNavLink Icon="@Icons.Material.Filled.SettingsInputComponent"
                                        OnClick="NavigateToDevices">
                                @_localizer["Devices"]
                            </MudNavLink>

                            <MudNavLink Icon="@Icons.Material.Filled.Settings"
                                        OnClick="NavigateToProfile">
                                @_localizer["Settings"]
                            </MudNavLink>

                            <MudNavLink Icon="@Icons.Material.Filled.Email"
                                        OnClick="NavigateToSubs">
                                @_localizer["Subscribtions"]
                            </MudNavLink>

                            <MudNavLink Icon="@Icons.Material.Filled.Logout"
                                        OnClick="Logout">
                                @_localizer["Logout"]
                            </MudNavLink>
                        </MudNavMenu>
                    </MudDrawer>

                    <MudMainContent Style="@($"height: 100vh; margin-left: {Margin}")">
                        @Body
                    </MudMainContent>
                </Authorized>
                <NotAuthorized>
                    <MudItem Class="image-in-background">
                        <MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-items-center bg-transparent" Style="height: 100vh;">
                            @Body
                        </MudContainer>
                    </MudItem>
                </NotAuthorized>
            </AuthorizeView>
        </CascadingValue>
    </CascadingValue>
</MudLayout>

@code {

    /// <summary>
    /// Fixes problem of missing styles.
    /// </summary>
    private string Margin { get; set; } = "var(--mud-drawer-width-left)";
    private bool IsOpen { get; set; } = false;
    private bool IsDesktop { get; set; } = false;
    private bool IsLoading { get; set; } = false;
    private DrawerVariant DrawerMode { get; set; } = DrawerVariant.Temporary;
    private Anchor Anchor { get; set; } = Anchor.Left;
    private MudThemeProvider _mudThemeProvider = new();
    private Platform Platform { get; set; } = Platform.Desktop;

    public MudTheme AppTheme { get; set; } = ThemeColors.AppTheme;
    public bool IsDarkMode { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        BrowserResizeExtensions.OnResize += BrowserResized;
        _preferenceService.OnPreferenceChange = async (preferences) =>
        {
            try
            {
                if (Theme.Inherit == preferences.Theme)
                {
                    var deviceMode = await _mudThemeProvider!.GetSystemPreference();
                    IsDarkMode = deviceMode;
                }
                else if (Theme.Light == preferences.Theme)
                    IsDarkMode = false;
                else
                    IsDarkMode = true;
            }
            catch
            {
                IsDarkMode = false;
            }
        };

        await _runtime.SubscribeToResizeEvent();
        await BrowserResized(await _runtime.GetScreenWidth());
        await _preferenceService.LoadPreferences();
        await _mudThemeProvider!.WatchSystemPreference(OnSystemPreferenceChanged);
    }

    public async ValueTask DisposeAsync()
    {
        BrowserResizeExtensions.OnResize -= BrowserResized;
        await _runtime.UnsubscribeToResizeEvent();
    }

    private async Task OnSystemPreferenceChanged(bool newValue)
    {
        IsDarkMode = newValue;
        await InvokeAsync(StateHasChanged);
    }

    private async Task Logout()
    {
        var applicationAuthorization = (_authenticationStateProvider as ApplicationStateProvider)!;

        await applicationAuthorization.Logout();
        await _localStorage.RemoveItemAsync(BrokerConstraints.BrokerListName);
        await _localStorage.RemoveItemAsync(DeviceConstants.DevicesListName);
        await _localStorage.RemoveItemAsync(UserConstraints.PreferencesStorage);

        await _clientService.Logout();
    }

    private void ToggleDrawer()
    {
        if (Platform == Platform.Mobile)
        {
            IsOpen = !IsOpen;
            IsDesktop = false;
        }
    }

    private async Task BrowserResized(int width)
    {
        if (JsRuntimeExtensions.IsDektop(width))
        {
            DrawerMode = DrawerVariant.Responsive;
            Platform = Platform.Desktop;
            Anchor = Anchor.Left;
            IsOpen = true;
            Margin = "var(--mud-drawer-width-left)";
        }
        else if (JsRuntimeExtensions.IsMobile(width))
        {
            DrawerMode = DrawerVariant.Responsive;
            Platform = Platform.Mobile;
            Anchor = Anchor.Right;
            IsOpen = false;
            Margin = "0px;";
        }
        else
        {
            DrawerMode = DrawerVariant.Mini;
            Platform = Platform.Tablet;
            Anchor = Anchor.Left;
            IsOpen = false;
            Margin = "var(--mud-drawer-width-mini-left)";
        }

        await InvokeAsync(StateHasChanged);
    }

    private void NavigateToBrokers() => NavigateToPage("/brokers");

    private void NavigateToDevices() => NavigateToPage("/devices");

    private void NavigateToSubs() => NavigateToPage("/statistics/subscribtions");

    private void NavigateToProfile() => NavigateToPage("/user/settings");

    private void NavigateToPage(string page)
    {
        _navigationManager.NavigateTo(page);

        if (Platform == Platform.Mobile)
            IsOpen = false;
    }
}