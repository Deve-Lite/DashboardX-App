@using System.Linq.Expressions;

<MudTextField @bind-Value="@Value"
              T="string"
              For="@For"
              InputType="@inputType"
              Variant="Variant.Filled"
              Adornment="Adornment.End"
              OnlyValidateIfDirty="true"
              Clearable="true"
              AdornmentIcon="@inputIcon"
              OnAdornmentClick="TogglePasswordVisibility"
              Label="@Label"
              HelperText="@HelperText" />

@code 
{
    private InputType inputType = InputType.Password;
    private string inputIcon = Icons.Material.Filled.VisibilityOff;
    private string value = string.Empty;

    [Parameter]
    public Expression<Func<string>>? For { get; set; }
    [Parameter]
    public string Label { get; set; } = string.Empty;
    [Parameter]
    public string HelperText { get; set; } = string.Empty;

#pragma warning disable BL0007
    [Parameter]
    public string Value
    {
        get => value;
        set
        {
            if (value == this.value)
                return;

            this.value = value;
            if (ValueChanged.HasDelegate)
            {
                ValueChanged.InvokeAsync(this.value);
            }
        }
    }
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    private void TogglePasswordVisibility()
    {
        if (inputType == InputType.Text)
        {
            inputIcon = Icons.Material.Filled.VisibilityOff;
            inputType = InputType.Password;
        }
        else
        {
            inputIcon = Icons.Material.Filled.Visibility;
            inputType = InputType.Text;
        }
    }
}
