@using Blazored.SessionStorage;
@using Infrastructure;
@using global::Shared.Constraints;
@inject NavigationManager navigationManager

@inject IJSRuntime JSRuntime

@inject ILocalStorageService _localStorage
@inject ISessionStorageService _sessionStorage
@inject IAuthenticationService _authenticationService
@inject AuthenticationStateProvider _authenticationStateProvider

@code
{
    protected override async Task OnInitializedAsync()
    {
        var appState = (_authenticationStateProvider as ApplicationStateProvider);

        var refreshToken = await _sessionStorage.GetItemAsync<string>(AuthConstraints.RefreshToken);

        if (!string.IsNullOrEmpty(refreshToken))
        {
            var successfullLoign = await _authenticationService.ReAuthenticate(refreshToken);

            if (successfullLoign)
            {
                await JSRuntime.InvokeVoidAsync("history.back");
                return;
            }
        }
        
        navigationManager.NavigateTo("/auth/login");
    }

}
