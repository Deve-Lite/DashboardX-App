@using Infrastructure
@using Presentation.Utils

@using global::Shared.Constraints
@using global::Shared.Models.Users

@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject IStringLocalizer<MainLayout> _localizer
@inject AuthenticationStateProvider _authenticationStateProvider
@inject ILocalStorageService _localStorage
@inject IPrefrenceService _preferenceService

<MudLayout Class="p-0 m-0">
    <MudThemeProvider IsDarkMode="@IsDarkMode" @ref="_mudThemeProvider" Theme="@AppTheme" />
    <MudSnackbarProvider />
    <MudDialogProvider />

    <AuthorizeView Roles="@Roles">
        <Authorized>
            <MudAppBar Elevation="1" Dense="@true" Color="Color.Primary">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Secondary" Edge="Edge.Start" OnClick="@ToggleDrawer" />
                <MudSpacer />
            </MudAppBar>
            <MudDrawer @bind-Open="@Open" ClipMode="DrawerClipMode.Docked" Elevation="1" Variant="@DrawerVariant.Responsive">
                <MudDrawerHeader>
                    <!-- TODO: Add icon here -->
                </MudDrawerHeader>
                <MudNavMenu>
                    <MudNavLink Match="NavLinkMatch.All" Href="/brokers">  @_localizer["Brokers"]  </MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" Href="/devices"> @_localizer["Devices"] </MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" Href="/user/settings"> @_localizer["Settings"] </MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" Href="/subs"> @_localizer["Subscribtions"] </MudNavLink>
                    <MudButton Variant="Variant.Text" OnClick="Logout">@_localizer["Logout"]</MudButton>
                </MudNavMenu>
            </MudDrawer>

            @if (IsLoading)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="@IsLoading" Class="loading position-absolute" Style="margin-top: 50px" />
            }

            <MudMainContent Style="height: 100vh;">
                @Body
            </MudMainContent>
        </Authorized>
        <NotAuthorized>
            @if (IsLoading)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="@IsLoading" Class="loading position-absolute" />
            }

            <MudItem Class="image-in-background">
                <MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-items-center bg-transparent" Style="height: 100vh;">
                    @Body
                </MudContainer>
            </MudItem>

        </NotAuthorized>
    </AuthorizeView>
</MudLayout>

@code {
    private bool Open { get; set; } = false;
    private bool IsLoading { get; set; } = false;
    private bool IsDarkMode { get; set; } = false;

    private MudTheme AppTheme { get; set; } = ThemeColors.AppTheme;
    private MudThemeProvider _mudThemeProvider = new();

    private string Roles { get; set; } = $"{RolesConstraints.Admin}, {RolesConstraints.User}";

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        _loadingService.OnLoadingChanged = (isLoading) =>
        {
            IsLoading = isLoading;
            StateHasChanged();
            return Task.CompletedTask;
        };
        _preferenceService.OnPreferenceChange = async (preferences) =>
        {
            try
            {
                if (Theme.Inherit == preferences.Theme)
                {
                    var deviceMode = await _mudThemeProvider!.GetSystemPreference();
                    IsDarkMode = deviceMode;
                }
                else if (Theme.Light == preferences.Theme)
                    IsDarkMode = false;
                else
                    IsDarkMode = true;
            }
            catch
            {
                IsDarkMode = false;
            }
        };

        await _preferenceService.LoadPreferences();
        await _mudThemeProvider!.WatchSystemPreference(OnSystemPreferenceChanged);
    }

    private Task OnSystemPreferenceChanged(bool newValue)
    {
        IsDarkMode = newValue;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task Logout()
    {
        var applicationAuthorization = (_authenticationStateProvider as ApplicationStateProvider)!;

        await applicationAuthorization.Logout();
        await _localStorage.RemoveItemAsync(BrokerConstraints.BrokerListName);
        await _localStorage.RemoveItemAsync(DeviceConstants.DevicesListName);
        await _localStorage.RemoveItemAsync(UserConstraints.PreferencesStorage);
    }

    private void ToggleDrawer()
    {
        Open = !Open;
    }
}