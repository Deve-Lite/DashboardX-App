@using global::Shared.Models.Brokers;
@inject IStringLocalizer<RemoveBrokerDialog> _localizer;
@inject IClientService _clientService;


<MudDialog Title="Removing Broker">
    <DialogContent>
        <MudText>@_localizer["Are you sure you want to remove this broker?"]</MudText>
        <MudText>@_localizer["Server name:"] @Broker.Name</MudText>
        <MudText>@_localizer["Server url:"] @Broker.Server</MudText>
        <MudText>@_localizer["Client id:"] @Broker.ClientId</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@_localizer["Cancel"]</MudButton>
        <MudButton form="upsertBrokerForm"
                   OnClick="RemoveAsync"
                   ButtonType="ButtonType.Submit"
                   Variant="Variant.Filled"
                   Color="Color.Warning">@_localizer["Remove"] </MudButton>
    </DialogActions>
</MudDialog>

@code 
{
    [CascadingParameter]
    private MudDialogInstance? Dialog { get; set; }

    [Parameter]
    public Broker Broker { get; set; } = new();

    private void Cancel() => Dialog!.Cancel();

    private async Task RemoveAsync()
    {
        if (string.IsNullOrEmpty(Broker.Id))
            return;

        if (_loadingService.IsLoading)
            return;

        _loadingService.ShowLoading();

        await _clientService.RemoveBroker(Broker.Id);
        Dialog!.Close(DialogResult.Ok(true));

        _loadingService.HideLoading();
    }
}
