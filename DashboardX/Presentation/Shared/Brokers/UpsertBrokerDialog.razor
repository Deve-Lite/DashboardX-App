@using Blazored.FluentValidation;
@using Infrastructure;
@using Presentation.Utils;
@using System.Net;
@using Presentation.Validators.Brokers;
@using global::Shared.Models.Brokers;

@inject IStringLocalizer<UpsertBrokerDialog> _localizer;
@inject IClientService _clientService

<MudDialog>
    <DialogContent>
        <MudForm @ref="@form"
                 Model="@Broker"
                 Validation="@(BrokerValidator.ValidateValue)"
                 ValidationDelay="0"
                 Class="m-0 p-0 w-100">
            <MudGrid Class="m-0 p-3 w-100">
                <MudItem xs="12"
                         Class="p-1 m-0">
                    <MudTextField @bind-Value="Broker.Name"
                                  T="string"
                                  Label="@_localizer["Name"]"
                                  Variant="Variant.Filled"
                                  OnlyValidateIfDirty="true"
                                  Clearable="true"
                                  Class="p-0 m-0"
                                  For="@(() => Broker.Name)"
                                  HelperText="@_localizer["Provide meaningful name."]" />
                </MudItem>

                <MudItem xs="12"
                         Class="p-1 m-0">

                    TODO ICONS
                  
                </MudItem>

                <MudItem xs="12"
                         Class="p-1 m-0">
                    <MudColorPicker @bind-Text="Broker.IconBackgroundColor"
                                    Label="@_localizer["Icon color"]"
                                    Class="p-0 m-0"
                                    Clearable="true"
                                    HelperText="@_localizer["Color for icon"]"
                                    Variant="Variant.Filled"
                                    ColorPickerView="ColorPickerView.Palette" />
                </MudItem>

                <MudItem xs="12"
                         Class="p-1 m-0">
                    <MudTextField @bind-Value="Broker.Server" T="string"
                                  Label="@_localizer["Server"]"
                                  Variant="Variant.Filled"
                                  OnlyValidateIfDirty="true"
                                  Clearable="true"
                                  Class="p-0 m-0"
                                  HelperText="@_localizer["Server url."]"
                                  For="@(() => Broker.Server)" />
                </MudItem>

                <MudItem xs="6"
                         Class="p-1 m-0">
                    <MudTextField @bind-Value="Broker.Port"
                                  T="int"
                                  Label="@_localizer["Port"]"
                                  Variant="Variant.Filled"
                                  OnlyValidateIfDirty="true"
                                  Clearable="true"
                                  Class="p-0 m-0"
                                  HelperText="@_localizer["Provide secure websocket port."]"
                                  For="@(() => Broker.Port)" />
              
                </MudItem>
                <MudItem xs="6"
                         Class="p-1 m-0">
                    <MudTextField @bind-Value="Broker.KeepAlive" T="int"
                                  Label="@_localizer["Keep Alive"]"
                                  Variant="Variant.Filled"
                                  OnlyValidateIfDirty="true"
                                  Clearable="true"
                                  Class="p-0 m-0"
                                  HelperText="@_localizer["Ping interval time in seconds."]"
                                  For="@(() => Broker.KeepAlive)" />
                </MudItem>
                <MudItem xs="12"
                         Class="p-1 m-0">
                    <MudTextField @bind-Value="Broker.ClientId" T="string"
                                  Label="@_localizer["Client Id"]"
                                  Variant="Variant.Filled"
                                  OnlyValidateIfDirty="true"
                                  Clearable="true"
                                  Class="p-0 m-0"
                                  HelperText="@_localizer["Broker unique identifier."]"
                                  For="@(() => Broker.ClientId)" />
                </MudItem>

                <MudItem xs="12"
                         Class="p-1 m-0">
                    <MudSwitch @bind-Checked="ShowAuthorizationFields"
                               Label="@_localizer["Is secured with password and username"]"
                               Color="Color.Primary" />
                </MudItem>

                @if (ShowAuthorizationFields)
                {
                    <MudItem xs="12"
                             Class="p-1 m-0">
                        <MudTextField @bind-Value="Broker.Username"
                                      T="string"
                                      Label="@_localizer["Username"]"
                                      Variant="Variant.Filled"
                                      OnlyValidateIfDirty="true"
                                      Clearable="true"
                                      Class="p-0 m-0"
                                      For="@(() => Broker.Username)" />
                      
                    </MudItem>

                    <MudItem xs="12"
                             Class="p-1 m-0">
                        <MudTextField @bind-Value="Broker.Password"
                                      Label="@_localizer["Password"]"
                                      Variant="Variant.Filled"
                                      OnlyValidateIfDirty="true"
                                      Clearable="true"
                                      Class="p-0 m-0"
                                      For="@(() => Broker.Password)"
                                      InputType="@_passwordInput"
                                      Adornment="Adornment.End"
                                      AdornmentIcon="@_passwordInputIcon"
                                      OnAdornmentClick="TogglePasswordVisibility" />
                    </MudItem>
                }
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@_localizer["Cancel"]</MudButton>
        <MudButton form="upsertBrokerForm"
                   OnClick="SubmitAsync"
                   Variant="Variant.Filled"
                   Color="Color.Primary">@_localizer["Submit"] </MudButton>
    </DialogActions>
</MudDialog>


@code
{
    [CascadingParameter]
    private MudDialogInstance? Dialog { get; set; }

    [Parameter]
    public Broker Broker { get; set; } = new();

    private BrokerValidator BrokerValidator = new();

    MudForm? form;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (form is not null && firstRender && form.IsValid)
            StateHasChanged();

        if (firstRender && !string.IsNullOrEmpty(Broker.Id))
        {
            Broker = Broker.Copy();

            if (!string.IsNullOrEmpty(Broker.Password) || !string.IsNullOrEmpty(Broker.Username))
                ShowAuthorizationFields = true;
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private bool ShowAuthorizationFields { get; set; } = false;
    private bool _passwordVisibility;
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        if (_passwordVisibility)
        {
            _passwordVisibility = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _passwordVisibility = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    private void Cancel() => Dialog!.Cancel();

    private async Task SubmitAsync()
    {
        if (_loadingService.IsLoading)
            return;

        await form!.Validate();

        if (!form.IsValid)
            return;

        _loadingService.ShowLoading();

        var result = Result<Client>.Fail();

        if (string.IsNullOrEmpty(Broker.Id))
            result = await _clientService.CreateClient(Broker);
        else
            result = await _clientService.UpdateClient(Broker);

        await RequestHelpers.InvokeAfterRequest(_snackbar, result, OnAdded);

        _loadingService.HideLoading();

        Dialog!.Close(DialogResult.Ok(result));
    }

    private Task OnAdded()
    {
        _snackbar.Add("Success", MudBlazor.Severity.Success);
        return Task.CompletedTask;
    }

}
