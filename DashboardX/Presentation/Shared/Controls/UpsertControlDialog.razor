@using Blazored.FluentValidation;
@using Infrastructure;
@using MQTTnet.Protocol;
@using Presentation.Utils;
@using System.Net;
@using global::Shared.Models.Brokers;
@using global::Shared.Models.Controls;
@using global::Shared.Models.Devices;

@inject IStringLocalizer<UpsertControlDialog> _localizer;
@inject IClientService _clientService
@inject IBrokerService _brokerService

<MudDialog>
    <DialogContent>
        <EditForm id="upsertBrokerForm" Model="@Control" OnValidSubmit="SubmitAsync">
            <FluentValidationValidator @ref="_fluentValidationValidator" />
            <MudGrid>
                <DataAnnotationsValidator />

                <MudItem xs="12">
                    <div class="d-flex justify-center">
                        <MudTextField @bind-Value="Control.Topic"
                                      T="string"
                                      Label="@_localizer["Topic Path"]"
                                      Variant="Variant.Outlined"
                                      For="@(() => Control.Topic)" />
                    </div>
                </MudItem>

                <MudItem xs="12">
                    <div class="d-flex justify-center">
                        <MudTextField @bind-Value="Control.Icon"
                                      T="string"
                                      Label="@_localizer["Icon"]"
                                      Variant="Variant.Outlined"
                                      For="@(() => Control.Icon)" />
                    </div>
                </MudItem>

                <MudItem xs="12">
                    <div class="d-flex justify-center">
                        <MudColorPicker @bind-Text="Control.IconBackgroundColor"
                                        Label="@_localizer["Icon background color"]"
                                        ColorPickerView="ColorPickerView.Palette" />

                    </div>
                </MudItem>

                <MudSelect @bind-Value="Control.QualityOfService"
                           xs="12"
                           Label="@_localizer["Quality of service"]"
                           For="(() => Control.QualityOfService)"
                           Variant="Variant.Outlined"
                           AnchorOrigin="Origin.BottomCenter">

                    <MudSelectItem Value="MqttQualityOfServiceLevel.AtMostOnce">@_localizer["At most once - 0"]</MudSelectItem>
                    <MudSelectItem Value="MqttQualityOfServiceLevel.AtLeastOnce">@_localizer["At least once - 1"]</MudSelectItem>
                    <MudSelectItem Value="MqttQualityOfServiceLevel.ExactlyOnce">@_localizer["Exactly once - 2"]</MudSelectItem>
                </MudSelect>

                <MudItem xs="12">
                    <div class="d-flex justify-start">
                        <MudSwitch @bind-Checked="Control.IsConfiramtionRequired"
                                   Label="@_localizer["Sending data requires confirmation"]"
                                   Color="Color.Primary" />
                    </div>
                </MudItem>

                <MudSelect @bind-Value="Control.Type"
                           xs="12"
                           Label="Broker"
                           For="(() => Control.Type)"
                           Variant="Variant.Outlined"
                           AnchorOrigin="Origin.BottomCenter">

                    <MudSelectItem Value="ControlType.Switch">@_localizer["Switch"]</MudSelectItem>
                    <MudSelectItem Value="ControlType.Slider">@_localizer["Slider"]</MudSelectItem>
                    <MudSelectItem Value="ControlType.Color">@_localizer["Color"]</MudSelectItem>
                    <MudSelectItem Value="ControlType.DateTime">@_localizer["DateTime"]</MudSelectItem>
                    <MudSelectItem Value="ControlType.State">@_localizer["State"]</MudSelectItem>
                    <MudSelectItem Value="ControlType.MultiButton">@_localizer["Multi Button"]</MudSelectItem>
                    <MudSelectItem Value="ControlType.Radio">@_localizer["Radio"]</MudSelectItem>
                    <MudSelectItem Value="ControlType.TextOut">@_localizer["Text Display"]</MudSelectItem>

                </MudSelect>

                @if (Control.Type == ControlType.Switch)
                {
                    <MudText>Switch Specific</MudText>
                }
                else if (Control.Type == ControlType.Slider)
                {
                    <MudText>Slider Specific</MudText>
                }
                else if (Control.Type == ControlType.Color)
                {
                    <MudText>Color Specific</MudText>
                }
                else if (Control.Type == ControlType.DateTime)
                {
                    <MudText>Date Time Specific</MudText>
                }
                else if (Control.Type == ControlType.State)
                {
                    <MudText>State Specific</MudText>
                }
                else if (Control.Type == ControlType.MultiButton)
                {
                    <MudText>Multi Button Specific</MudText>
                }
                else if (Control.Type == ControlType.Radio)
                {
                    <MudText>Radio Specific</MudText>
                }
                else if (Control.Type == ControlType.TextOut)
                {
                    <MudText>Text Display Specific</MudText>
                }

            </MudGrid>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@_localizer["Cancel"]</MudButton>
        <MudButton form="upsertBrokerForm"
                   OnClick="SubmitAsync"
                   ButtonType="ButtonType.Submit"
                   Variant="Variant.Filled"
                   Disabled="@(!Validated)"
                   Color="Color.Primary">@_localizer["Submit"] </MudButton>
    </DialogActions>
</MudDialog>


@code
{
    [CascadingParameter]
    private MudDialogInstance? Dialog { get; set; }

    [Parameter]
    public Control Control { get; set; } = new();
    [Parameter]
    public string DeviceId { get; set; } = string.Empty;
    [Parameter]
    public string ClientId { get; set; } = string.Empty;

    private FluentValidationValidator? _fluentValidationValidator;
    private bool Validated => _fluentValidationValidator == null ? false : _fluentValidationValidator.Validate(options => { options.IncludeAllRuleSets(); });

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (Validated && firstRender)
            StateHasChanged();

        if (firstRender && !string.IsNullOrEmpty(Control.Id))
            Control = Control.Copy();

        return base.OnAfterRenderAsync(firstRender);
    }

    private void Cancel() => Dialog!.Cancel();

    private async Task SubmitAsync()
    {
        if (_loadingService.IsLoading)
            return;

        _loadingService.ShowLoading();

        var result = Result.Fail();

        if (string.IsNullOrEmpty(Control.Id))
            result = await _clientService.CreateControlForDevice(ClientId, DeviceId, Control);
        else
            result = await _clientService.UpdateControlForDevice(ClientId, DeviceId, Control);

        await RequestHelpers.InvokeAfterRequest(_snackbar, result, OnAdded);

        _loadingService.HideLoading();

        Dialog!.Close(DialogResult.Ok(result));
    }

    private Task OnAdded()
    {
        _snackbar.Add("Success", MudBlazor.Severity.Success, config => { config.ShowCloseIcon = false; });
        return Task.CompletedTask;
    }
}