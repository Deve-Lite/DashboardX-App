@using Blazored.FluentValidation;
@using Infrastructure;
@using Presentation.Utils;
@using System.Net;
@using global::Shared.Models.Brokers;
@using global::Shared.Models.Controls;
@using global::Shared.Models.Devices;

@inject IStringLocalizer<UpsertControlDialog> _localizer;
@inject IClientService _clientService
@inject IBrokerService _brokerService

<MudDialog>
    <DialogContent>
        <EditForm id="upsertBrokerForm" Model="@Control" OnValidSubmit="SubmitAsync">
            <FluentValidationValidator @ref="_fluentValidationValidator" />
            <MudGrid>

                <DataAnnotationsValidator />

                
            </MudGrid>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@_localizer["Cancel"]</MudButton>
        <MudButton form="upsertBrokerForm"
                   OnClick="SubmitAsync"
                   ButtonType="ButtonType.Submit"
                   Variant="Variant.Filled"
                   Disabled="@(!Validated)"
                   Color="Color.Primary">@_localizer["Submit"] </MudButton>
    </DialogActions>
</MudDialog>


@code
{
    [CascadingParameter]
    private MudDialogInstance? Dialog { get; set; }

    [Parameter]
    public Control Control { get; set; } = new();
    [Parameter]
    public string DeviceId { get; set; } = string.Empty;
    [Parameter]
    public string ClientId { get; set; } = string.Empty;

    private List<Broker> AvaliableBrokers = new();
    private FluentValidationValidator? _fluentValidationValidator;
    private bool Validated => _fluentValidationValidator == null ? false : _fluentValidationValidator.Validate(options => { options.IncludeAllRuleSets(); });
    private bool ShowAuthorizationFields { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var result = await _brokerService.GetBrokers();

        if (result.Succeeded)
            AvaliableBrokers = result.Data;
        else
            Dialog!.Close(DialogResult.Ok(Result.Fail(result.Messages, result.StatusCode)));

        await base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (Validated && firstRender)
            StateHasChanged();

        if (firstRender && !string.IsNullOrEmpty(Control.Id))
            Control = Control.Copy();

        return base.OnAfterRenderAsync(firstRender);
    }

    private void Cancel() => Dialog!.Cancel();

    private async Task SubmitAsync()
    {
        if (_loadingService.IsLoading)
            return;

        _loadingService.ShowLoading();

        var result = Result.Fail();

        if (string.IsNullOrEmpty(Control.Id))
            result = await _clientService.CreateControlForDevice(ClientId, DeviceId, Control);
        else
            result = await _clientService.UpdateControlForDevice(ClientId, DeviceId, Control);

        await RequestHelpers.InvokeAfterRequest(_snackbar, result, OnAdded);

        _loadingService.HideLoading();

        Dialog!.Close(DialogResult.Ok(result));
    }

    private Task OnAdded()
    {
        _snackbar.Add("Success", MudBlazor.Severity.Success, config => { config.ShowCloseIcon = false; });
        return Task.CompletedTask;
    }

}