@using Blazored.FluentValidation;
@using Infrastructure;
@using Presentation.Utils;
@using System.Net;
@using Presentation.Validators.Devices;
@using global::Shared.Models.Brokers;
@using global::Shared.Models.Devices;

@inject IStringLocalizer<UpsertDeviceDialog> _localizer;
@inject IClientService _clientService
@inject IBrokerService _brokerService

<MudDialog>
    <DialogContent>
        <MudForm @ref="@form"
                 Model="@Device"
                 Validation="@(DeviceValidator.ValidateValue)"
                 ValidationDelay="0"
                 Class="m-0 p-0 w-100">
            <MudGrid Class="m-0 p-3 w-100">

                <MudItem xs="12"
                         Class="p-1 m-0">
                      
                         <MudTextField @bind-Value="Device.Name"
                                      T="string"
                                      Label="@_localizer["Name"]"
                                  Variant="Variant.Filled"
                                  OnlyValidateIfDirty="true"
                                  Clearable="true"
                                  Class="p-0 m-0"
                                  HelperText="@_localizer["Provide meaningful name."]"
                                      For="@(() => Device.Name)" />
                </MudItem>

                <MudItem xs="12"
                         Class="p-1 m-0">
                    <MudSelect @bind-Value="Device.BrokerId"
                               xs="12"
                               T="string"
                               Class="p-0 m-0"
                               Label="@_localizer["Broker"]"
                               For="(() => Device.BrokerId)"
                               Variant="Variant.Filled"
                               AnchorOrigin="Origin.BottomCenter">
                        @foreach (var data in AvaliableBrokers)
                        {
                            <MudSelectItem Value="@data.Id">@data.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12"
                         Class="p-1 m-0">
                    TODO Icon
                </MudItem>

                <MudItem xs="12"
                         Class="p-1 m-0">
                    <MudColorPicker @bind-Text="Device.IconBackgroundColor"
                                    Label="@_localizer["Icon color"]"
                                    Class="p-0 m-0"
                                    Clearable="true"
                                    HelperText="@_localizer["Color for icon."]"
                                    Variant="Variant.Filled"
                                    ColorPickerView="ColorPickerView.Palette" />
                </MudItem>

                <MudItem xs="12"
                        Class="p-1 m-0">

                        <MudTextField @bind-Value="Device.Placing"
                                      T="string"
                                      Label="@_localizer["Placing"]"
                                  Variant="Variant.Filled"
                                  OnlyValidateIfDirty="true"
                                  Clearable="true"
                                  Class="p-0 m-0"
                                  For="@(() => Device.Placing)"
                                  HelperText="@_localizer["Placing of device."]" />
  
                </MudItem>

                <MudItem xs="12"
                         Class="p-1 m-0">
                        <MudTextField @bind-Value="Device.BaseDevicePath"
                                      T="string"
                                      Label="@_localizer["Base device path"]"
                                  Variant="Variant.Filled"
                                  OnlyValidateIfDirty="true"
                                  Clearable="true"
                                  Class="p-0 m-0"
                                  HelperText="@_localizer["Path combined with broker path {brokerPath}{DevicePath}."]"
                                      For="@(() => Device.BaseDevicePath)" />
               
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@_localizer["Cancel"]</MudButton>
        <MudButton form="upsertBrokerForm"
                   OnClick="SubmitAsync"
                   Variant="Variant.Filled"
                   Color="Color.Primary">@_localizer["Submit"] </MudButton>
    </DialogActions>
</MudDialog>


@code
{
    [CascadingParameter]
    private MudDialogInstance? Dialog { get; set; }

    [Parameter]
    public Device Device { get; set; } = new();

    [Parameter]
    public string ClientId { get; set; } = string.Empty;

    private DeviceValidator DeviceValidator = new();

    MudForm? form;

    private List<Broker> AvaliableBrokers = new();

    protected override async Task OnInitializedAsync()
    {
        var result = await _brokerService.GetBrokers();

        if (result.Succeeded)
        {
            AvaliableBrokers = result.Data;
        }
        else
            Dialog!.Close(DialogResult.Ok(Result.Fail(result.Messages, result.StatusCode)));

        await base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (form is not null && firstRender && form.IsValid)
            StateHasChanged();

        if (firstRender && !string.IsNullOrEmpty(Device.Id))
            Device = Device.Copy();

        return base.OnAfterRenderAsync(firstRender);
    }

    private void Cancel() => Dialog!.Cancel();

    private async Task SubmitAsync()
    {
        if (_loadingService.IsLoading)
            return;

        await form!.Validate();

        if (!form.IsValid)
            return;

        _loadingService.ShowLoading();

        var result = Result<Device>.Fail();

        if (string.IsNullOrEmpty(Device.Id))
            result = await _clientService.CreateDeviceForClient(Device);
        else
            result = await _clientService.UpdateDeviceForClient(Device);

        await RequestHelpers.InvokeAfterRequest(_snackbar, result, OnAdded);

        _loadingService.HideLoading();

        Dialog!.Close(DialogResult.Ok(result));
    }

    private Task OnAdded()
    {
        _snackbar.Add("Success", MudBlazor.Severity.Success, config => { config.ShowCloseIcon = false; });
        return Task.CompletedTask;
    }

}