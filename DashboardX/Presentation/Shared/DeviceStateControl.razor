@using global::Shared.Models.Devices;
@using global::Shared.Models.Controls;

@inject IStringLocalizer<DeviceStateControl> _localizer

@if (!HasStateControl)
{


              <MudButton Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Filled.HighlightOff"
                   OnClick="NotAvaliableToast"
                   Color="Color.Warning">
                   Not Available
              </MudButton>
}
else if (IsOn)
{
        <MudButton Variant="Variant.Filled"
               StartIcon="@Icons.Material.Filled.CloudQueue"
                   OnClick="NotAvaliableToast"
                   Color="Color.Success">
            On
        </MudButton>
}
else
{
        <MudButton Variant="Variant.Filled"
               StartIcon="@Icons.Material.Filled.CloudOff"
                   OnClick="NotAvaliableToast"
                   Color="Color.Error">
            Off
        </MudButton>
}

@code 
{
    [Parameter]
    public Device? Device { get; set; }
    [Parameter]
    public Client? Client { get; set; }

    public Control? StateControl { get; set; }

    public bool IsOn { get; set; } = false;
    public bool HasStateControl { get; set; } = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if(Device is not null)
        {
            var control = Device.Controls.FirstOrDefault(x => x.Type == ControlType.State);

            if(control is not null)
            {
                HasStateControl = true;
                StateControl = control;

                //TODO Determinate state
            }
        }
    }


    public void NotAvaliableToast()
    {
        _snackbar.Add(_localizer["This device doesn't have state control."], Severity.Warning);
    }
}
