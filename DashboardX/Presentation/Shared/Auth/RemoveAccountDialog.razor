@using Infrastructure;
@using Presentation.Utils;
@using Presentation.Validators.Auth;
@using global::Shared.Models.Controls;
@using global::Shared.Models.Devices;
@using global::Shared.Models.Users;

@inject IStringLocalizer<ConfirmDialog> _localizer
@inject IUserService _userService

<MudDialog>
    <DialogContent>
        <MudForm @ref="@form"
                 Model="@Model"
                 Validation="@(Validator.ValidateValue)"
                 ValidationDelay="0">
            <MudItem xs="12">
                <MudItem xs="12">
                    <MudTextField @bind-Value="Model.Password"
                                  T="string"
                                  For="@(() => Model.Password)"
                                  InputType="@_passwordInput"
                                  Variant="Variant.Filled"
                                  Adornment="Adornment.End"
                                  OnlyValidateIfDirty="true"
                                  Clearable="true"
                                  AdornmentIcon="@_passwordInputIcon"
                                  OnAdornmentClick="TogglePasswordVisibility"
                                  Label="@_localizer["Password"]"
                                  HelperText="@_localizer["Provide password for your account."]" />
                </MudItem>
            </MudItem>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel"
                   Variant="Variant.Filled"
                   Color="Color.Primary">@_localizer["Cancel"]</MudButton>
        <MudButton OnClick="RemoveAsync"
                   Variant="Variant.Filled"
                   Color="Color.Error">@_localizer["Remove"] </MudButton>
    </DialogActions>
</MudDialog>

@code
{
    [CascadingParameter]
    private MudDialogInstance? Dialog { get; set; }

    private PasswordConfirm Model = new();
    private PasswordConfirmValidator Validator = new();
    MudForm? form;

    private void Cancel() => Dialog!.Cancel();

    private async Task RemoveAsync()
    {
        if (_loadingService.IsLoading)
            return;

        await form!.Validate();

        if (!form.IsValid)
            return;

        _loadingService.ShowLoading();

        var result = await _userService.RemoveAccount(Model);

        if (result.Succeeded)
        {
            //TODO: Clear local data
            _snackbar.Add(_localizer["Thanks for using our app."], Severity.Info);

            _loadingService.HideLoading();
            _navigationManager.NavigateTo("/");
        }

        _snackbar.Add(_localizer["Failed to remove your account."], Severity.Error);

        _loadingService.HideLoading();

        Dialog!.Close(DialogResult.Ok(result));
    }

    #region Form

    private bool _passwordVisibility;
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        if (_passwordVisibility)
        {
            _passwordVisibility = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _passwordVisibility = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    #endregion
}