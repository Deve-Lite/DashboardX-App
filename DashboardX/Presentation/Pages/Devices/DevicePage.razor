@page "/devices/{DeviceId}/{ClientId}"
@using Infrastructure;
@using Presentation.Shared.Controls;
@using Presentation.Shared.Devices;
@using global::Shared.Models.Controls;
@using global::Shared.Models.Devices;

@inject ITopicService _topicService
@inject IClientService _clientService
@inject NavigationManager _navigationManager

@if (_loadingService.IsLoading)
{
    <div> Loading... </div>
}
else if (!LoadedSuccessfully)
{
    <div>
        Failed to load... TODO: Refresh button
    </div>
}
else
{
    <MudGrid Class="p-5">

        <MudItem>
            <MudCard Elevation="25" Class="container container-fit-content p-2" style="border-radius: 1rem; max-width: 25rem;">

                <MudText Align="Align.Center"> @Device.Name </MudText>
                <MudText>Placing: @Device.Placing </MudText>
                <MudText>Path: @Device.BaseDevicePath </MudText>
                <MudText Align="Align.End">Edited At: @Device.EditedAt </MudText>

                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Style="z-index: 10;"
                           OnClick="RemoveDevice">
                    Remove
                </MudButton>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Style="z-index: 10;"
                           OnClick="UpdateDevice">
                    Update
                </MudButton>

            </MudCard>
        </MudItem>
        
        <MudItem>

            <MudItem>
                <MudCard Elevation="25" Class="container container-fit-content p-5" style="border-radius: 1rem;">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="AddControl">
                        Add new Control
                    </MudButton>
                </MudCard>
            </MudItem>

            @foreach (var control in Device.Controls)
            {
                <MudItem>
                    <MudText>Type: @control.StringType </MudText>
                    <MudText>Confirmation: @control.IsConfiramtionRequired </MudText>
                    <MudText>Last value on topic:  @_topicService.LastMessageOnTopic(ClientId, Device, control) </MudText>
                    
                    <MudText>
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   Style="z-index: 10;"
                                   OnClick="(() => RemoveControl(control))">
                            Remove
                        </MudButton>
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   Style="z-index: 10;"
                                   OnClick="(() => UpdateControl(control))">
                            Update
                        </MudButton>
                    </MudText>
                </MudItem>
            }

        </MudItem>
    </MudGrid>
}



@code {

    [Parameter]
    public string DeviceId { get; set; } = string.Empty;
    [Parameter]
    public string ClientId { get; set; } = string.Empty;

    public bool LoadedSuccessfully { get; set; } = true;

    public Client? Client { get; set; }
    public Device Device { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (_loadingService.IsLoading)
            return;

        _loadingService.ShowLoading();

        var result = await _clientService.GetClient(ClientId);

        if (result.Succeeded)
        {
            Client = result.Data;
            LoadedSuccessfully = true;
            Device = Client.Devices.FirstOrDefault(x => x.Id == DeviceId)!;
        }

        if (result.ShowToast)
            foreach (var message in result.Messages)
                _snackbar.Add(message, result.Severity);

        _loadingService.HideLoading();

        await base.OnInitializedAsync();
    }

    private async Task UpdateDevice()
    {
        var parameters = new DialogParameters<UpsertDeviceDialog> { { x => x.Device, Device }, { x => x.ClientId, Client!.Id } };

        var dialog = await _dialogService.ShowAsync<UpsertDeviceDialog>("Edit Device", parameters);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var x = result.Data as Result<Client> ?? Result<Client>.Fail(message: "Couldn't parse response.");

        if (x.Succeeded)
        {
            //TODO: Device should be update because it will be replaced
            StateHasChanged();
        }
    }
    private async Task RemoveDevice()
    {
        var parameters = new DialogParameters<RemoveDeviceDialog> 
        { 
            { x => x.Device, Device },
            { x => x.ClientId, Client!.Id } 
        };

        var dialog = await _dialogService.ShowAsync<RemoveDeviceDialog>("Remove Device", parameters);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var x = result.Data as Result ?? Result.Fail(message: "Couldn't parse response.");

        if (x.Succeeded)
        {
            // TODO: Implement navigation stack !

            _navigationManager.NavigateTo("/devices");

            StateHasChanged();
        }
    }

    private async Task AddControl()
    {
        var dialog = await _dialogService.ShowAsync<UpsertControlDialog>("Create Control");
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var x = result.Data as Result<Client> ?? Result<Client>.Fail(message: "Couldn't parse response.");

        if (x.Succeeded)
            StateHasChanged();
    }
    private async Task UpdateControl(Control control)
    {
        var parameters = new DialogParameters<UpsertControlDialog>
        { 
            {  x => x.DeviceId, DeviceId }, 
            {  x => x.ClientId, ClientId } ,
            {  x => x.Control, control }
        };

        var dialog = await _dialogService.ShowAsync<UpsertControlDialog>("Edit Control", parameters);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var x = result.Data as Result<Client> ?? Result<Client>.Fail(message: "Couldn't parse response.");

        if (x.Succeeded)
            StateHasChanged();
    }
    private async Task RemoveControl(Control control)
    {
        var parameters = new DialogParameters<RemoveControlDialog> 
        {
            {  x => x.DeviceId, DeviceId },
            {  x => x.ClientId, ClientId } ,
            {  x => x.Control, control }
        };

        var dialog = await _dialogService.ShowAsync<RemoveControlDialog>("Remove Control", parameters);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var x = result.Data as Result ?? Result.Fail(message: "Couldn't parse response.");

        if (x.Succeeded)
            StateHasChanged();
    }
}
