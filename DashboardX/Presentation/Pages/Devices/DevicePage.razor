@page "/devices/{DeviceId}/{ClientId}"
@using Infrastructure;
@using Presentation.Extensions;
@using Presentation.SharedComponents.Brokers
@using Presentation.SharedComponents.Controls;
@using Presentation.SharedComponents.Devices;
@using Presentation.Utils.PagesUtils;
@using Presentation.Utils;
@using Shared.Models.Controls;
@using Shared.Models.Devices;

@inject IClientService _clientService
@inject NavigationManager _navigationManager
@inject IStringLocalizer<DevicePage> _localizer

@implements IDisposable

@if (_loadingService.IsLoading)
{
    <div> Loading... </div>
}
else if (!LoadedSuccessfully)
{
    <div>
        Failed to load... TODO: Refresh button
    </div>
}
else if (IsMobile)
{

}
else
{
    <MudGrid Class="m-0 p-3 w-100">
        <MudItem xs="6" Class="p-0 pt-3 pb-3 m-0">
            <MudButton OnClick="async() => await _runtime.GoBack()"
                       Color="Color.Dark"
                       Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.ArrowBackIos">
                @_localizer["Back"]
            </MudButton>
        </MudItem>

        <MudItem xs="6" Class="d-flex p-0 pt-3 pb-3 m-0 justify-content-end">

            <MudButton OnClick="AddControl"
                       Color="Color.Primary"
                       Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.AddToQueue">
                @_localizer["Add Control"]
            </MudButton>

        </MudItem>

        <MudItem xs="12" sm="12" md="9" lg="7" xl="5" xxl="4"
                 Class="p-0 m-0 pt-4 pb-5 mud-w-auto">
            <MudCard Elevation="5"
                     Class="m-0 p-4 rounded-2">
                <MudCardContent Class="p-0 m-0">
                    <MudGrid Class="m-0 p-0 w-100">

                        <MudItem xs="12">
                            <MudText Typo="Typo.h6" Align="Align.Center"> @Device.Name</MudText>
                        </MudItem>

                        <MudItem xs="6" sm="5" md="4" lg="3" xl="2" Class="m-0 p-1">
                            <MudText Typo="Typo.button" Class="p-1 pl-0 m-0">
                                @_localizer["Placing"]
                            </MudText>
                            <MudText Class="hide-overlapping-text">
                                @Device.Placing
                            </MudText>
                        </MudItem>

                        <MudItem xs="6" sm="5" md="4" lg="3" xl="2" Class="m-0 p-1">
                            <MudText Typo="Typo.button" Class="p-1 pl-0 m-0">
                                @_localizer["Base Path"]
                            </MudText>
                            <MudText Class="hide-overlapping-text">
                                @(string.IsNullOrEmpty(Device.BaseDevicePath) ? _localizer["Base path not provided."] : Device.BaseDevicePath)
                            </MudText>
                        </MudItem>

                        <MudItem xs="6" sm="5" md="4" lg="3" xl="2" Class="m-0 p-1">
                            <MudText Typo="Typo.button" Class="p-1 pl-0 m-0">
                                @_localizer["Broker"]
                            </MudText>
                            <MudText Class="hide-overlapping-text">
                                @Client!.Broker.Name
                            </MudText>
                        </MudItem>

                        <MudItem xs="6" sm="5" md="4" lg="3" xl="2" xxl="1" Class="m-0 p-1">
                            <MudText Typo="Typo.button" Class="p-1 pl-0 m-0">
                                @_localizer["Keep Alive"]
                            </MudText>

                            <MudText Class="hide-overlapping-text">
                                @Client!.Broker.KeepAlive
                            </MudText>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>

                <MudItem xs="12" Class="p-0 pt-2 pb-2 m-0">
                    <MudProgressLinear Size="Size.Small" Color="Color.Tertiary" Rounded="true" Value="100" />
                </MudItem>

                <MudCardActions Class="p-0 m-0">
                    <MudButton Class="z-10 m-0"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="() => DevicePagesUtils.UpdateDevice(Device, _dialogService, StateHasChanged, _localizer)">
                        @_localizer["Edit"]
                    </MudButton>

                    <MudButton Class="z-10 m-0 ml-2"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               Href="@($"brokers/{Client!.Id}")">
                        @_localizer["Broker"]
                    </MudButton>

                    <MudButton Class="z-10 m-0 ml-2 mr-2"
                               Variant="Variant.Filled"
                               Color="Color.Error"
                               OnClick="() => DevicePagesUtils.RemoveDevice(Device, _dialogService, _localizer, _navigationManager)">
                        @_localizer["Delete"]
                    </MudButton>

                    <BrokerConnectionSwitch Client="Client" />

                </MudCardActions>

            </MudCard>
        </MudItem>

        <MudItem xs="12" Class="p-0 pt-4 pb-4 m-0">
            <MudProgressLinear Size="Size.Small" Color="Color.Tertiary" Rounded="true" Value="100" />
        </MudItem>

        <MudItem xs="12" Class="p-0 pt-4 pb-4 m-0">

            @foreach (var control in Device.Controls)
            {
                <MudItem>
                    <MudCard Elevation="25" Class="container container-fit-content p-5" style="border-radius: 1rem;">

                        @if (control.Type == ControlType.Button)
                        {
                            <MudButton Color="Color.Secondary"
                                       Variant="Variant.Filled"
                                       OnClick="(async() => await BaseSendAction(control, async() => await control.Send(Device, Client!)))">
                                @control.Name
                            </MudButton>
                        }
                        else if (control.Type == ControlType.Radio)
                        {
                            <MudButton Color="Color.Secondary"
                                       Variant="Variant.Filled"
                                       OnClick="(async() => {await RadioAction(control); })">
                                @control.Name
                            </MudButton>
                        }
                        else if (control.Type == ControlType.Text)
                        {
                            <MudItem>
                                <MudText>Name: @control.Name </MudText>
                                <MudText>Last value on topic:  @(Client?.TopicService?.LastMessageOnTopic(ClientId, Device, control) ?? "No message") </MudText>
                            </MudItem>
                        }
                        else if (control.Type == ControlType.Slider)
                        {
                            <MudItem>
                                <MudText>Name: @control.Name </MudText>
                                <MudText>Last value on topic:  @GetSliderValue(control) </MudText>
                            </MudItem>


                            <MudButton OnClick="(async() => await SetSliderValue(control))">
                                Slide value
                            </MudButton>
                        }
                        else if (control.Type == ControlType.DateTime)
                        {
                            <MudItem>
                                <MudText>Name: @control.Name </MudText>
                                <MudText>Last value on topic:  @GetValue(control) </MudText>
                            </MudItem>

                            //TODO: Dialog
                        }
                        else if (control.Type == ControlType.Switch)
                        {
                            @if (OnStateSwitch(control))
                            {
                                <MudItem>
                                    <MudText>Name: @control.Name </MudText>
                                    <MudText>Last value on topic:  @GetValue(control) </MudText>
                                    <MudText>Current State:  @GetValue(control) </MudText>
                                </MudItem>

                                <MudSwitch Checked="true" CheckedChanged="async (bool value) => { await SwitchStateChanged(value, control); }">
                                    Switch
                                </MudSwitch>
                            }
                            else
                            {
                                <MudItem>
                                    <MudText>Name: @control.Name </MudText>
                                    <MudText>Last value on topic:  @GetValue(control) </MudText>
                                    <MudText>Current State:  @GetValue(control) </MudText>
                                </MudItem>

                                <MudSwitch Checked="false" CheckedChanged="async (bool value) => { await SwitchStateChanged(value, control); }">
                                    Switch
                                </MudSwitch>

                            }
                        }
                        else if (control.Type == ControlType.Color)
                        {
                            <MudItem>
                                <MudText>Name: @control.Name </MudText>
                                <MudText>Last value on topic:  @GetValue(control) </MudText>
                            </MudItem>

                            //TODO: Dialog
                        }
                        else if (control.Type == ControlType.State)
                        {
                            <MudItem>
                                <MudText>Name: @control.Name </MudText>
                                <MudText>Last value on topic:  @GetValue(control) </MudText>
                            </MudItem>

                            <MudButton OnClick="(async() => await BaseSendAction(control, async() => await control.Send(Device, Client!)))">
                                Send State Payload
                            </MudButton>
                        }

                        <MudText>
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       Style="z-index: 10;"
                                       OnClick="(() => RemoveControl(control))">
                                Remove
                            </MudButton>
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       Style="z-index: 10;"
                                       OnClick="(() => UpdateControl(control))">
                                Update
                            </MudButton>
                        </MudText>
                    </MudCard>
                </MudItem>
            }
        </MudItem>
    </MudGrid>
}



@code {

    [Parameter]
    public string DeviceId { get; set; } = string.Empty;
    [Parameter]
    public string ClientId { get; set; } = string.Empty;

    public bool IsMobile { get; set; }
    public bool LoadedSuccessfully { get; set; } = true;

    public Client? Client { get; set; }
    public Device Device { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        IsMobile = false; //TODO: Uncoment = await _runtime.IsMobile();

        if (_loadingService.IsLoading)
            return;

        _loadingService.ShowLoading();

        var result = await _clientService.GetClient(ClientId);

        if (result.Succeeded)
        {
            Client = result.Data;
            Client.RerenderPage += Rerender;
            LoadedSuccessfully = true;
            Device = Client.Devices.FirstOrDefault(x => x.Id == DeviceId)!;
        }

        if (result.ShowToast)
            foreach (var message in result.Messages)
                _snackbar.Add(message, result.Severity);

        _loadingService.HideLoading();

        await base.OnInitializedAsync();
    }
    public void Dispose()
    {
        Client!.RerenderPage -= Rerender;
    }

    private async Task AddControl()
    {
        var parameters = new DialogParameters<UpsertControlDialog>
        {
            {  x => x.DeviceId, DeviceId },
            {  x => x.ClientId, ClientId }
        };

        var dialog = await _dialogService.ShowAsync<UpsertControlDialog>("Create Control", parameters);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var x = result.Data as Result<Client> ?? Result<Client>.Fail(message: "Couldn't parse response.");

        if (x.Succeeded)
            StateHasChanged();
    }
    private async Task UpdateControl(Control control)
    {
        var parameters = new DialogParameters<UpsertControlDialog>
        {
            {  x => x.DeviceId, DeviceId },
            {  x => x.ClientId, ClientId } ,
            {  x => x.Control, control }
        };

        var dialog = await _dialogService.ShowAsync<UpsertControlDialog>("Edit Control", parameters);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var x = result.Data as Result<Client> ?? Result<Client>.Fail(message: "Couldn't parse response.");

        if (x.Succeeded)
            StateHasChanged();
    }
    private async Task RemoveControl(Control control)
    {
        var parameters = new DialogParameters<RemoveControlDialog>
        {
            {  x => x.DeviceId, DeviceId },
            {  x => x.ClientId, ClientId } ,
            {  x => x.Control, control }
        };

        var dialog = await _dialogService.ShowAsync<RemoveControlDialog>("Remove Control", parameters);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var x = result.Data as Result ?? Result.Fail(message: "Couldn't parse response.");

        if (x.Succeeded)
            StateHasChanged();
    }

    private async Task ConnectAsync()
    {
        await Client!.ConnectAsync();
        StateHasChanged();
    }
    private async Task DisconnectAsync()
    {
        await Client!.DisconnectAsync();
        StateHasChanged();
    }

    private Task Rerender()
    {
        StateHasChanged();
        return Task.CompletedTask;
    }

    #region Control Functions

    #region Switch

    private bool OnStateSwitch(Control control)
    {
        var value = GetValue(control);

        var onPayload = control.Attributes.OnPayload;

        if (value == onPayload)
            return true;

        return false;
    }

    private async Task SwitchStateChanged(bool state, Control control)
    {

        Client?.TopicService?.UpdateMessageOnTopic(ClientId, Device, control, state.ToString());

        var action = (async () =>
        {
            await control.Send(Device, Client!, state);
        });

        await BaseSendAction(control, action);
    }

    #endregion

    #region Slider

    public double GetSliderValue(Control control)
    {
        var currentValue = Client?.TopicService?.LastMessageOnTopic(ClientId, Device, control);

        if (currentValue is null)
            return 0;

        if (double.TryParse(currentValue, out var val))
            return val;

        return 0;
    }

    public async Task SetSliderValue(Control control)
    {
        var currentValue = GetSliderValue(control);

        var parameters = new DialogParameters<SliderControlDialog>
        {
            { "SliderValue", currentValue },
            { "MaxSliderValue", control.Attributes.MaxValue },
            { "MinSliderValue", control.Attributes.MinValue },
        };

        var dialog = await _dialogService.ShowAsync<SliderControlDialog>("Slider Dialog", parameters);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var value = Convert.ToDouble(result.Data);

        Client?.TopicService?.UpdateMessageOnTopic(ClientId, Device, control, value.ToString());

        var action = (async () =>
        {
            var stringValue = value.ToString();
            await control.Send(Device, Client!, stringValue);
        });

        await BaseSendAction(control, action);
    }

    #endregion

    #region Radio

    public async Task RadioAction(Control control)
    {
        var parameters = new DialogParameters<RadioControlDialog>
        {
            { x => x.Payloads,  control.Attributes.Payloads }
        };

        var dialog = await _dialogService.ShowAsync<RadioControlDialog>("Confirmation", parameters);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var key = result.Data as string ?? string.Empty;

        if (!control.Attributes.Payloads.ContainsKey(key))
            return;

        var action = (async () =>
        {
            var payload = control.Attributes.Payloads[key];
            await control.Send(Device, Client!, payload);
        });

        await BaseSendAction(control, action);
    }

    #endregion

    public async Task BaseSendAction(Control control, Func<Task> action)
    {
        bool confirmed = true;
        if (control.IsConfiramtionRequired)
        {
            var parameters = new DialogParameters<ConfirmDialog>
            {
                { x => x.Description, "Are you sure to invoke this action??" }
            };

            var dialog = await _dialogService.ShowAsync<ConfirmDialog>("Confirmation", parameters);
            var result = await dialog.Result;
            confirmed = Convert.ToBoolean(result.Data);
        }

        if (!confirmed)
            return;

        await action.Invoke();
    }

    public string GetValue(Control control)
    {
        return Client?.TopicService?.LastMessageOnTopic(ClientId, Device, control) ?? "No message";
    }

    #endregion
}
