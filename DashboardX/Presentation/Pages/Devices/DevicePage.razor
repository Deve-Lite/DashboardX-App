@page "/devices/{DeviceId}/{ClientId}"
@using Infrastructure;
@using Presentation.Extensions;
@using Presentation.Shared.Controls;
@using Presentation.Shared.Devices;
@using global::Shared.Models.Controls;
@using global::Shared.Models.Devices;

@inject IClientService _clientService
@inject NavigationManager _navigationManager

@implements IDisposable

@if (_loadingService.IsLoading)
{
    <div> Loading... </div>
}
else if (!LoadedSuccessfully)
{
    <div>
        Failed to load... TODO: Refresh button
    </div>
}
else
{
    <MudGrid Class="p-5">

        <MudItem>
            <MudCard Elevation="25" Class="container container-fit-content p-2" style="border-radius: 1rem; max-width: 25rem;">

                <MudText Align="Align.Center"> @Device.Name </MudText>
                <MudText>Placing: @Device.Placing </MudText>
                <MudText>Path: @Device.BaseDevicePath </MudText>
                <MudText >Connection: @Client!.IsConnected </MudText>

                <MudText Align="Align.End">Edited At: @Device.EditedAt </MudText>

                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Style="z-index: 10;"
                           OnClick="RemoveDevice">
                    Remove
                </MudButton>

                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Style="z-index: 10;"
                           OnClick="UpdateDevice">
                    Update
                </MudButton>

                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Style="z-index: 10;"
                           OnClick="(() => ConnectAsync())">
                    Connect
                </MudButton>

            </MudCard>
        </MudItem>

        <MudItem>

            <MudItem>
                <MudCard Elevation="25" Class="container container-fit-content p-5" style="border-radius: 1rem;">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="AddControl">
                        Add new Control
                    </MudButton>
                </MudCard>
            </MudItem>

            @foreach (var control in Device.Controls)
            {

                <MudItem>
                    <MudCard Elevation="25" Class="container container-fit-content p-5" style="border-radius: 1rem;">
                       
                        @if(control.Type == ControlType.Button)
                        {
                            <MudButton Color="Color.Secondary" 
                                       Variant="Variant.Filled"
                                       OnClick="(async() => await BaseSendAction(control, async() => await control.Send(Device, Client!)))">
                                       @control.Name
                            </MudButton>
                        }
                        else if (control.Type == ControlType.Radio)
                        {
                            <MudButton Color="Color.Secondary"
                                       Variant="Variant.Filled"
                                       OnClick="(async() => {await RadioAction(control); })">
                                @control.Name
                            </MudButton>
                        }
                        else if (control.Type == ControlType.Text)
                        {
                            <MudItem>
                                <MudText>Name: @control.Name </MudText>
                                <MudText>Last value on topic:  @(Client?.TopicService?.LastMessageOnTopic(ClientId, Device, control) ?? "No message") </MudText>
                            </MudItem>
                        }
                        else if (control.Type == ControlType.Slider)
                        {
                            <MudItem>
                                <MudText>Name: @control.Name </MudText>
                                <MudText>Last value on topic:  @(Client?.TopicService?.LastMessageOnTopic(ClientId, Device, control) ?? "No message") </MudText>
                            </MudItem>


                            <MudSlider Value="SliderCurrent(control)"
                                Min="0"
                                Max="100"
                                T="double"
                                Immediate="false"
                                ValueLabel="true"
                                ValueChanged="((value) => SliderValueChanged(value, control))">

                            </MudSlider>
                        }
                        else
                        {
                            <MudText>Type: @control.StringType </MudText>
                            <MudText>Confirmation: @control.IsConfiramtionRequired </MudText>
                            <MudText>Last value on topic:  @(Client?.TopicService?.LastMessageOnTopic(ClientId, Device, control) ?? "No message") </MudText>
                        }

                        <MudText>
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       Style="z-index: 10;"
                                       OnClick="(() => RemoveControl(control))">
                                Remove
                            </MudButton>
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       Style="z-index: 10;"
                                       OnClick="(() => UpdateControl(control))">
                                Update
                            </MudButton>
                        </MudText>
                    </MudCard>
                </MudItem>
            }

        </MudItem>
    </MudGrid>
}



@code {

    [Parameter]
    public string DeviceId { get; set; } = string.Empty;
    [Parameter]
    public string ClientId { get; set; } = string.Empty;

    public bool LoadedSuccessfully { get; set; } = true;

    public Client? Client { get; set; }
    public Device Device { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (_loadingService.IsLoading)
            return;

        _loadingService.ShowLoading();

        var result = await _clientService.GetClient(ClientId);

        if (result.Succeeded)
        {
            Client = result.Data;
            Client.RerenderPage += Rerender;
            LoadedSuccessfully = true;
            Device = Client.Devices.FirstOrDefault(x => x.Id == DeviceId)!;
        }

        if (result.ShowToast)
            foreach (var message in result.Messages)
                _snackbar.Add(message, result.Severity);

        _loadingService.HideLoading();

        await base.OnInitializedAsync();
    }
    public void Dispose()
    {
        Client!.RerenderPage -= Rerender;
    }

    private async Task UpdateDevice()
    {
        var parameters = new DialogParameters<UpsertDeviceDialog> { { x => x.Device, Device }, { x => x.ClientId, Client!.Id } };

        var dialog = await _dialogService.ShowAsync<UpsertDeviceDialog>("Edit Device", parameters);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var x = result.Data as Result<Client> ?? Result<Client>.Fail(message: "Couldn't parse response.");

        if (x.Succeeded)
        {
            //TODO: Device should be update because it will be replaced
            StateHasChanged();
        }
    }
    private async Task RemoveDevice()
    {
        var parameters = new DialogParameters<RemoveDeviceDialog>
        {
            { x => x.Device, Device },
            { x => x.ClientId, Client!.Id }
        };

        var dialog = await _dialogService.ShowAsync<RemoveDeviceDialog>("Remove Device", parameters);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var x = result.Data as Result ?? Result.Fail(message: "Couldn't parse response.");

        if (x.Succeeded)
        {
            // TODO: Implement navigation stack !

            _navigationManager.NavigateTo("/devices");

            StateHasChanged();
        }
    }

    private async Task AddControl()
    {
        var parameters = new DialogParameters<UpsertControlDialog>
        {
            {  x => x.DeviceId, DeviceId },
            {  x => x.ClientId, ClientId }
        };

        var dialog = await _dialogService.ShowAsync<UpsertControlDialog>("Create Control", parameters);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var x = result.Data as Result<Client> ?? Result<Client>.Fail(message: "Couldn't parse response.");

        if (x.Succeeded)
            StateHasChanged();
    }
    private async Task UpdateControl(Control control)
    {
        var parameters = new DialogParameters<UpsertControlDialog>
        {
            {  x => x.DeviceId, DeviceId },
            {  x => x.ClientId, ClientId } ,
            {  x => x.Control, control }
        };

        var dialog = await _dialogService.ShowAsync<UpsertControlDialog>("Edit Control", parameters);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var x = result.Data as Result<Client> ?? Result<Client>.Fail(message: "Couldn't parse response.");

        if (x.Succeeded)
            StateHasChanged();
    }
    private async Task RemoveControl(Control control)
    {
        var parameters = new DialogParameters<RemoveControlDialog>
        {
            {  x => x.DeviceId, DeviceId },
            {  x => x.ClientId, ClientId } ,
            {  x => x.Control, control }
        };

        var dialog = await _dialogService.ShowAsync<RemoveControlDialog>("Remove Control", parameters);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var x = result.Data as Result ?? Result.Fail(message: "Couldn't parse response.");

        if (x.Succeeded)
            StateHasChanged();
    }

    private async Task ConnectAsync()
    {
        await Client!.ConnectAsync();
        StateHasChanged();
    }
    private async Task DisconnectAsync()
    {
        await Client!.DisconnectAsync();
        StateHasChanged();
    }

    private Task Rerender()
    {
        StateHasChanged();
        return Task.CompletedTask;
    }

    #region Control Functions

    #region Slider

    private double? sliderValue = null;

    public long LastUpdateTicks = DateTime.Now.Ticks;
    private bool valueSetByUser = false;

    public double SliderCurrent(Control control)
    {
        var value = Client?.TopicService?.LastMessageOnTopic(ClientId, Device, control);

        if (valueSetByUser)
        {
            valueSetByUser = false;
            return Convert.ToDouble(sliderValue);
        }

        if (sliderValue is null)
        {
            if (double.TryParse(value, out double result))
                sliderValue = result;
            else
                sliderValue = 0;
        }
        else
        {
            if (double.TryParse(value, out double result))
                sliderValue = result;
        }

        return Convert.ToDouble(sliderValue);
    }

    public void SliderValueChanged(double value, Control control)
    {
        var ticks = DateTime.Now.Ticks;

        valueSetByUser = true;

        var diff = ticks - LastUpdateTicks;

        if (diff < 50000)
            return;
        
        LastUpdateTicks = ticks;

        sliderValue = value;
        var action = (async () =>
        {
            var stringValue = value.ToString();
            await control.Send(Device, Client!, stringValue);
        });

        BaseSendAction(control, action);
    }

    #endregion

    public async Task RadioAction(Control control)
    {
        var parameters = new DialogParameters<RadioControlDialog>
        {
            { x => x.Payloads,  control.Attributes.Payloads }
        };

        var dialog = await _dialogService.ShowAsync<RadioControlDialog>("Confirmation", parameters);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var key = result.Data as string ?? string.Empty;

        if(!control.Attributes.Payloads.ContainsKey(key))
            return;

        var action = (async () => 
        { 
            var payload = control.Attributes.Payloads[key];
            await control.Send(Device, Client!, payload);
        });

        await BaseSendAction(control, action);
    }

    public async Task BaseSendAction(Control control, Func<Task> action)
    {
        bool confirmed = true;
        if (control.IsConfiramtionRequired)
        {
            var parameters = new DialogParameters<ConfirmDialog>
            {
                { x => x.Description, "Are you sure to invoke this action??" }
            };

            var dialog = await _dialogService.ShowAsync<ConfirmDialog>("Confirmation", parameters);
            var result = await dialog.Result;
            confirmed = Convert.ToBoolean(result.Data);
        }

        if(!confirmed)
            return;

        await action.Invoke();
    }

    #endregion
}
