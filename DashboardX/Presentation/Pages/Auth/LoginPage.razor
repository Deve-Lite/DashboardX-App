@page "/"
@page "/auth/login"

@using Blazored.FluentValidation;
@using FluentValidation;
@using Infrastructure;
@using System.Diagnostics;
@using Presentation.Utils;
@using global::Shared.Models.Auth;
@using global::Shared.Constraints;

@attribute [AllowAnonymous]
@inject IStringLocalizer<LoginPage> _localizer
@inject ILocalStorageService _localStorage
@inject IAuthenticationService _authenticationService
@inject AuthenticationStateProvider _authenticationStateProvider;

@if (!Initializing)
{
    <MudCard Class="container d-flex container-fit-content p-5" style="border-radius: 1rem; max-width 25rem; height 100vh;">
        <EditForm Model="@LoginData" OnValidSubmit="LoginAsync">
            <FluentValidationValidator @ref="_fluentValidationValidator" />
            <MudGrid>

                <DataAnnotationsValidator />

                <MudItem xs="12">
                    <div class="d-flex justify-center">
                        <MudText Typo="Typo.h4">@_localizer["Sign In"]</MudText>
                    </div>
                </MudItem>

                <MudItem xs="12">
                    <div class="d-flex justify-center">
                        <MudText>@_localizer["Don't have an account?"] <MudLink Href="/auth/register">@_localizer["Register"]</MudLink></MudText>
                    </div>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string"
                                  Label="@_localizer["Email"]"
                                  Variant="Variant.Outlined"
                    @bind-Value="LoginData.Email"
                                  For="@(() => LoginData.Email)" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Label="@_localizer["Password"]"
                                  Variant="Variant.Outlined"
                                 @bind-Value="LoginData.Password"
                                  For="@(() => LoginData.Password)"
                                  InputType="@_passwordInput"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@_passwordInputIcon"
                                  OnAdornmentClick="TogglePasswordVisibility" />
                </MudItem>
                <MudItem xs="12" Class="d-flex justify-space-between align-center">
                    <MudCheckBox T="bool"
                    @bind-Checked="RememberMe"
                                 Label="@_localizer["Remember Me"]"
                                 Color="Color.Primary"
                                 Class="ml-n1"></MudCheckBox>
                    <MudLink Href="/account/forgot-password">@_localizer["Forgot password?"]</MudLink>
                </MudItem>
                <MudItem xs="12" Class="d-flex justify-center">
                    <MudButton ButtonType="ButtonType.Submit"
                               Variant="Variant.Filled"
                               Disabled="@(!Validated)"
                               Color="Color.Primary"
                               Size="Size.Large"
                               Style="width: 100%;">
                        @_localizer["Sign In"]
                    </MudButton>
                </MudItem>

                <MudItem xs="12">
                    <MudButton OnClick="FillAdministratorCredentials">@_localizer["Fill Administrator Credentials"]</MudButton>
                </MudItem>
                <MudItem xs="12">
                    <MudButton OnClick="FillBasicUserCredentials">@_localizer["Login with user Credentials."]</MudButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudCard>
}


@code
{
    [Parameter] 
    public bool IsLoading { get; set; }
    public bool Initializing { get; set; }

    private LoginModel LoginData { get; set; } = new LoginModel();
    private bool RememberMe { get; set; }
    private FluentValidationValidator? _fluentValidationValidator = new();
    private bool Validated => _fluentValidationValidator!.Validate(options => { options.IncludeAllRuleSets(); });


    protected override async Task OnInitializedAsync()
    {
        //TODO : fix tokens are null after refresh

        var appState = (_authenticationStateProvider as ApplicationStateProvider);


        if (!string.IsNullOrEmpty(appState!.RefreshToken))
        {
            //TODO: save actual page and redirect to it if authorized state
            _navigationManager.NavigateTo("/brokers");
            return;
        }

        var refreshToken = await _localStorage.GetItemAsync<string>(AuthConstraints.RefreshToken);

        if(string.IsNullOrEmpty(refreshToken))
            return;

        if (_loadingService.IsLoading)
            return;

        Initializing = true;

        await appState.RemoveLoginState();

        _loadingService.ShowLoading();

        RememberMe = await _localStorage.GetItemAsync<bool>(AuthConstraints.RememberMeName);

        if (RememberMe)
        {
            var successfullLoign = await _authenticationService.AuthenticateOnRememberMe(refreshToken);

            if (successfullLoign)
            {
                //TODO: Download user data -> settings / profile / etc

                _snackbar.Add("Hello there!", MudBlazor.Severity.Success, config => { config.ShowCloseIcon = false; });
                _navigationManager.NavigateTo("/brokers");
            }
        }

        Initializing = false;

        _loadingService.HideLoading();
    }

    private async Task LoginAsync()
    {
        if(_loadingService.IsLoading)
            return;

        _loadingService.ShowLoading();

        await _localStorage.SetItemAsync(AuthConstraints.RememberMeName, RememberMe);

        var result = await _authenticationService.Login(LoginData);

        await RequestHelpers.InvokeAfterRequest(_snackbar, result, OnLoaded, "Hello there!");

        _loadingService.HideLoading();
    }

    private Task OnLoaded()
    {
        _snackbar.Add("Hello there!", MudBlazor.Severity.Success, config => { config.ShowCloseIcon = false; });
        _navigationManager.NavigateTo("/brokers");

        return Task.CompletedTask;
    }

    private bool _passwordVisibility;
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        if (_passwordVisibility)
        {
            _passwordVisibility = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _passwordVisibility = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    private void FillAdministratorCredentials()
    {
        LoginData.Email = "psp515@wp.pl";
        LoginData.Password = "Admin123!";
    }

    private void FillBasicUserCredentials()
    {
        LoginData.Email = "dred@gmail.pl";
        LoginData.Password = "User123!";
    }
}
