@page "/auth/register"
@using Blazored.FluentValidation;
@using Infrastructure.Services;
@using Presentation.Utils;
@using Presentation.Validators.Auth;
@using global::Shared.Models.Auth;

@attribute [AllowAnonymous]

@inject IAuthenticationService _authenticationService
@inject IStringLocalizer<RegisterPage> _localizer

@if (_loadingService.IsLoading)
{
    <div> Loading... </div>
}
else
{
    <MudCard Class="card p-5" style="border-radius: 1rem;">
        <MudGrid>
            <MudForm @ref="@form"
                     Model="@RegisterData"
                     Validation="@(RegisterValidator.ValidateValue)"
                     ValidationDelay="0">
                <MudGrid>
                    <MudItem xs="12">
                        <MudText Class="text-center"
                                 Color="Color.Primary"
                                 Typo="Typo.h4">
                            @_localizer["DashboardX"]
                        </MudText>
                    </MudItem>

                    <MudItem xs="12">
                        <MudText Class="text-center">
                            @_localizer["Ready for consuming you custom device functionalities?"]
                        </MudText>
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="RegisterData.Username"
                                      T="string"
                                      For="@(() => RegisterData.Username)"
                                      Variant="Variant.Filled"
                                      OnlyValidateIfDirty="true"
                                      Clearable="true"
                                      Label="@_localizer["Username"]" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="RegisterData.Email"
                                      T="string"
                                      For="@(() => RegisterData.Email)"
                                      Variant="Variant.Filled"
                                      OnlyValidateIfDirty="true"
                                      Clearable="true"
                                      Label="@_localizer["Email"]" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="RegisterData.Password"
                                      T="string"
                                      For="@(() => RegisterData.Password)"
                                      InputType="@_passwordInput"
                                      Variant="Variant.Filled"
                                      Adornment="Adornment.End"
                                      OnlyValidateIfDirty="true"
                                      Clearable="true"
                                      AdornmentIcon="@_passwordInputIcon"
                                      OnAdornmentClick="TogglePasswordVisibility"
                                      Label="@_localizer["Password"]" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="RegisterData.ConfirmPassword"
                                      T="string"
                                      For="@(() => RegisterData.ConfirmPassword)"
                                      Variant="Variant.Filled"
                                      Clearable="true"
                                      InputType="InputType.Password"
                                      Label="@_localizer["Confirm Password"]" />
                    </MudItem>

                    <MudItem xs="12"
                             Class="d-flex justify-content-center">
                        <MudButton Class="w-100"
                                   Variant="Variant.Filled"
                                   Disabled="@((!form?.IsValid) ?? false)"
                                   Color="Color.Primary"
                                   OnClick="RegisterAsync"
                                   EndIcon="@Icons.Material.Filled.AssignmentInd"
                                   Size="Size.Large">
                            @_localizer["Register"]
                        </MudButton>
                    </MudItem>

                    <MudItem xs="6"
                             Class="d-flex justify-content-center">
                        <MudButton Variant="Variant.Filled"
                                   Class="w-100"
                                   Color="Color.Dark"
                                   Size="Size.Large"
                                   StartIcon="@Icons.Material.Filled.ArrowBackIos"
                                   OnClick="BackToLoginPage">
                            @_localizer["Go Back"]
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudGrid>
    </MudCard>
}

@code {
    private RegisterModel RegisterData = new();
    private RegisterValidator RegisterValidator = new();
    MudForm? form;

    private async Task RegisterAsync()
    {
        if (_loadingService.IsLoading)
            return;

        _loadingService.ShowLoading();

        var result = await _authenticationService.Register(RegisterData);

        await RequestHelpers.InvokeAfterRequest(_snackbar, result, OnRegisteredSuccessfully);

        _loadingService.HideLoading();
    }

    private void BackToLoginPage()
    {
        _navigationManager.NavigateTo("/auth/login");
    }

    private Task OnRegisteredSuccessfully()
    {
        _snackbar.Add(_localizer["Registered successfully!"], MudBlazor.Severity.Success);
        _navigationManager.NavigateTo("/auth/login");
        return Task.CompletedTask;
    }

    #region Form

    private bool _passwordVisibility;
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        if (_passwordVisibility)
        {
            _passwordVisibility = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _passwordVisibility = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    #endregion
}
