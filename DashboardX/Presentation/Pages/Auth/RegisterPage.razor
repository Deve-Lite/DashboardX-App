@page "/auth/register"
@using Blazored.FluentValidation;
@using Infrastructure.Services;
@using global::Shared.Models.Auth;
@attribute [AllowAnonymous]
@inject IAuthenticationService _authenticationService
@inject IStringLocalizer<RegisterPage> _localizer

<MudCard Class="card p-5" style="border-radius: 1rem;">
    <EditForm Model="@RegisterData" OnValidSubmit="RegisterAsync">
        <FluentValidationValidator @ref="_fluentValidationValidator" />
        <MudGrid>
            
            <DataAnnotationsValidator />

            <MudItem xs="12">
                <div class="d-flex justify-center">
                    <MudText Typo="Typo.h4">@_localizer["Register"]</MudText>
                </div>
            </MudItem>
            <MudItem xs="12">
                <div class="d-flex justify-center">
                    <MudText>@_localizer["Already have an account?"] <MudLink Href="/auth/login">@_localizer["Sign In"]</MudLink></MudText>
                </div>
            </MudItem>
            <MudItem xs="12">
                <MudTextField T="string"
                              For="@(() => RegisterData.Username)"
                              Variant="Variant.Outlined"
                @bind-Value="RegisterData.Username"
                              Label="@_localizer["Username"]" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField T="string"
                              For="@(() => RegisterData.Email)"
                              Variant="Variant.Outlined"
                @bind-Value="RegisterData.Email"
                              Label="@_localizer["Email"]" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField T="string"
                              For="@(() => RegisterData.Password)"
                              InputType="@_passwordInput"
                              Variant="Variant.Outlined"
                              Adornment="Adornment.End"
                              AdornmentIcon="@_passwordInputIcon"
                              OnAdornmentClick="TogglePasswordVisibility"
                @bind-Value="RegisterData.Password"
                              Label="@_localizer["Password"]" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField T="string"
                              For="@(() => RegisterData.ConfirmPassword)"
                              Variant="Variant.Outlined"
                              InputType="InputType.Password"
                @bind-Value="RegisterData.ConfirmPassword"
                              Label="@_localizer["Confirm Password"]" />
            </MudItem>
            <MudItem xs="12" Class="d-flex justify-center">
                <MudButton ButtonType="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Disabled="@(!Validated)"
                           Color="Color.Primary"
                           Size="Size.Large"
                           Style="width: 100%;">
                    @_localizer["Register"]
                </MudButton>
            </MudItem>
        </MudGrid>
    </EditForm>
</MudCard>

@code {
    private RegisterModel RegisterData { get; set; } = new();
    private FluentValidationValidator? _fluentValidationValidator = new();
    private bool Validated => _fluentValidationValidator!.Validate(options => { options.IncludeAllRuleSets(); });

    private async Task RegisterAsync()
    {
        if (_loadingService.IsLoading)
            return;

        _loadingService.ShowLoading();

        var result = await _authenticationService.Register(RegisterData);

        if (result.Succeeded)
        {
            _snackbar.Add("Registered successfully", MudBlazor.Severity.Success, config => { config.ShowCloseIcon = false; });
            _navigationManager.NavigateTo("/auth/login");
        }
        else
        {
            foreach (var error in result.Messages)
                _snackbar.Add(error, MudBlazor.Severity.Error, config => { config.ShowCloseIcon = false; });
        }

        _loadingService.HideLoading();
    }

    private bool _passwordVisibility;
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        if (_passwordVisibility)
        {
            _passwordVisibility = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _passwordVisibility = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }
}
