@page "/brokers/{BrokerId}"
@using MQTTnet.Client;
@using Presentation.Models;
@using Presentation.Utils.PagesUtils;
@using Presentation.Shared.Brokers;
@using Presentation.Utils;
@using global::Shared.Models.Devices;

@inject IClientService _clientService
@inject IStringLocalizer<BrokerPage> _localizer

@implements IDisposable

@if (_loadingService.IsLoading)
{
    <div> Loading... </div>
}
else if (!LoadedSuccessfully)
{
    <div>
        Failed to load... TODO: Refresh button
    </div>
}
else if (IsMobile)
{
    //TODO
}
else
{
    <MudGrid Class="m-0 p-3 w-100">

        <MudItem xs="7" Class="p-0 pt-3 pb-3 m-0">

            <MudButton OnClick="async() => await _runtime.GoBack()"
                       Color="Color.Dark"
                       Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.ArrowBackIos">
                @_localizer["Back"]
            </MudButton>

            <MudButton Class="z-10 ml-2"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="() => BrokerPagesUtils.UpdateBroker(Client, _dialogService, StateHasChanged, _localizer)">
                @_localizer["Edit"]
            </MudButton>

            <MudButton Class="z-10 ml-2 mr-2"
                       Variant="Variant.Filled"
                       Color="Color.Error"
                       OnClick="() => BrokerPagesUtils.RemoveBroker(Client, _dialogService, StateHasChanged, _localizer)">
                @_localizer["Delete"]
            </MudButton>

        </MudItem>
        <MudItem xs="5" Class="d-flex p-0 pt-3 pb-3 m-0 justify-content-end">

            <MudButton OnClick="() => DevicePagesUtils.AddDevice(StateHasChanged, _dialogService, _localizer, Client!.Id)"
                       Color="Color.Primary"
                       Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.AddToQueue">
                @_localizer["Add Device"]
            </MudButton>

        </MudItem>

        <MudItem Class="p-0 m-0 pt-4 pb-5 mud-w-auto">
            <MudPaper Elevation="5"
                      Class="m-0 p-2 rounded-2">
                <MudGrid Class="m-0 p-0 w-100">

                    <MudItem xs="12" Class="p-1 m-0">
                        <MudText Typo="Typo.h6" Class="text-center"> @Client!.Broker.Name</MudText>
                    </MudItem>

                    <MudItem xs="4" Class="p-0 m-0 mud-fill-height mud-h-100">
                        <MudGrid Class="p-0 m-0 justify-content-center w-100 mud-fill-height mud-h-100">
                            <MudItem xs="12" Class="p-1 m-0 h-100 d-flex justify-content-center align-content-center">
                                <MudPaper Elevation="10" Class="p-1 m-1 rounded-circle mud-fill-height mud-h-100">
                                    <MudIcon Class="p-0 m-0"
                                             Style="height: 5.5rem; width: 5.5rem;"
                                             Icon="@Icons.Material.Filled.Home">
                                            <!-- TODO Create icon recognition system -->
                                    </MudIcon>
                                </MudPaper>
                            </MudItem>

                            <MudItem xs="12" Class="p-1 pt-3 m-0 h-100 d-flex mud-fill-height mud-h-100 justify-content-center align-content-center">
                                <BrokerConnectionSwitch Client="Client" />
                            </MudItem>

                        </MudGrid>
                    </MudItem>
                    <MudItem xs="8" Class="m-0 p-1">
                        <MudText Typo="Typo.button" Class="p-1 pl-0 m-0">
                            @_localizer["Server"]
                        </MudText>
                        <MudText Class="hide-overlapping-text">
                            @Client!.Broker.Server
                        </MudText>

                        <MudText Typo="Typo.button" Class="p-1 pl-0 m-0">
                            @_localizer["Port"]
                        </MudText>

                        <MudText Class="hide-overlapping-text">
                            @Client!.Broker.Port
                        </MudText>

                        <MudText Typo="Typo.button" Class="p-1 pl-0 m-0">
                            @_localizer["Client Id"]
                        </MudText>

                        <MudText Class="hide-overlapping-text">
                            @Client!.Broker.ClientId
                        </MudText>

                        <MudText Typo="Typo.button" Class="p-1 pl-0 m-0">
                            @_localizer["Keep Alive"]
                        </MudText>

                        <MudText Class="hide-overlapping-text">
                            @Client!.Broker.KeepAlive
                        </MudText>
                    </MudItem> 
                </MudGrid>
            </MudPaper>
        </MudItem>

        <MudItem Class="p-0 pt-2" xs="12">
            <MudList Class="p-0 w-100"
                     Dense="true"
                     Clickable="true">

                <MudListSubheader Class="d-flex p-0 m-0">
                    <MudGrid Class="p-0 m-0">
                        <MudItem xs="1" Class="d-flex p-1 m-0">

                        </MudItem>
                        <MudItem xs="2" Class="d-flex p-1 m-0 align-items-center justify-content-start">
                            <MudText Typo="Typo.h6">
                                @_localizer["Name"]
                            </MudText>
                        </MudItem>
                        <MudItem xs="2" Class="d-flex p-1 m-0 align-items-center justify-content-start">
                            <MudText Typo="Typo.h6">
                                @_localizer["Placing"]
                            </MudText>
                        </MudItem>
                        <MudItem xs="2" Class="d-flex p-1 m-0 align-items-center justify-content-start">
                            <MudText Typo="Typo.h6">
                                @_localizer["Path"]
                            </MudText>
                        </MudItem>
                        <MudItem xs="3" Class="d-flex p-1 m-0 align-items-center justify-content-center">
                            <MudText Typo="Typo.h6">
                                @_localizer["State"]
                            </MudText>
                        </MudItem>
                        <MudItem xs="2"> </MudItem>
                    </MudGrid>

                </MudListSubheader>

                <MudProgressLinear Size="Size.Small" Color="Color.Primary" Rounded="true" Value="100" />
    
                @foreach (var device in Client!.Devices)
                {
                    <MudListItem Class="d-flex m-0 p-0 pt-1 pb-1 align-items-center justify-content-center"
                                 Href="@($"/devices/{device.Id}/{BrokerId}")">
                        <MudGrid Class="w-100 p-0 m-0">
                            <MudItem xs="1" Class="d-flex p-0 m-0 align-items-center justify-content-center">

                                <ModelIcon Icon="@device.Icon"
                                           BackgroundColor="@device.IconBackgroundColor"
                                           IconSize="Size.Medium" />

                            </MudItem>
                            <MudItem xs="2" Class="d-flex m-0 p-0 align-items-center justify-content-start">
                                <MudText Class="hide-overlapping-text">
                                    @device.Name
                                </MudText>
                            </MudItem>
                            <MudItem xs="2" Class="d-flex m-0 p-0 align-items-center justify-content-start">
                                <MudText Class="hide-overlapping-text">
                                    @device.Placing
                                </MudText>
                            </MudItem>
                            <MudItem xs="2" Class="d-flex m-0 p-0 align-items-center justify-content-start">
                                <MudText Class="hide-overlapping-text">
                                    @device.BaseDevicePath
                                </MudText>
                            </MudItem>
                            <MudItem xs="3" Class="d-flex m-0 p-0 align-items-center justify-content-center">
                                <DeviceStateControl Client="Client" 
                                                    Device="device"/>
                            </MudItem>
                            <MudItem xs="2" Class="d-flex m-0 p-0 align-items-center justify-content-evenly">
                                <MudIconButton Class="z-10"
                                               Icon="@Icons.Material.Filled.Edit"
                                               OnClick="() => DevicePagesUtils.UpdateDevice(device, _dialogService, StateHasChanged, _localizer)">

                                </MudIconButton>

                                <MudIconButton Class="z-10"
                                               Icon="@Icons.Material.Filled.Delete"
                                               OnClick="() => DevicePagesUtils.RemoveDevice(device, _dialogService, _localizer, _navigationManager)">

                                </MudIconButton>
                            </MudItem>
                        </MudGrid>
                    </MudListItem>

                    <MudProgressLinear Size="Size.Small" Color="Color.Primary" Rounded="true" Value="0" />
                }
            </MudList>
        </MudItem>
    </MudGrid>
}


@code
{
    [Parameter] 
    public string BrokerId { get; set; } = string.Empty;
    public bool IsMobile { get; set; }
    private bool LoadedSuccessfully { get; set; } = false;
    private Client? Client { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (_loadingService.IsLoading)
            return;

        _loadingService.ShowLoading();

        IsMobile = false; //TODO: Uncoment = await _runtime.IsMobile();

        var result = await _clientService.GetClient(BrokerId);

        if (result.Succeeded)
        {
            Client = result.Data;
            Client!.RerenderPage += Rerender;
            LoadedSuccessfully = true;
        }

        if (result.ShowToast)
            foreach (var message in result.Messages)
                _snackbar.Add(message, result.Severity);


        _loadingService.HideLoading();
        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        Client!.RerenderPage -= Rerender;
    }

    private Task Rerender()
    {
        StateHasChanged();
        return Task.CompletedTask;
    }

    public void NavigateToDevice(Device device)
    {
        _navigationManager.NavigateTo($"/devices/{device.Id}/{BrokerId}");
    }
}
