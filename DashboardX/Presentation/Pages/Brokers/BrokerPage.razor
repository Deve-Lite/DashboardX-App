@page "/brokers/{BrokerId}"
@using MQTTnet.Client;
@using Presentation.Models;
@using global::Shared.Models.Devices;

@inject IClientService _clientService
@inject IStringLocalizer<BrokerPage> _localizer

@implements IDisposable

@if (_loadingService.IsLoading)
{
    <div> Loading... </div>
}
else if (!LoadedSuccessfully)
{
    <div>
        Failed to load... TODO: Refresh button
    </div>
}
else if (IsMobile)
{
    //TODO
}
else
{
    <MudGrid Class="m-0 p-3 w-100">
        <MudItem xs="5" Class="fit-content">
            <MudPaper>
                <MudGrid>
                    <MudItem xs="8">
                        <MudText Typo="Typo.h6" Class="text-center"> @Client!.Broker.Name</MudText>
                    </MudItem>
                    <MudItem xs="8">
                        <MudText Class="text-center">@_localizer["Server"]: @Client!.Broker.Server</MudText>
                    </MudItem>
                    <MudItem xs="8">
                        <MudText Class="text-center">@_localizer["Port"]: @Client!.Broker.Port</MudText>
                    </MudItem>
                    <MudItem xs="8">
                        <MudText Class="text-center">@_localizer["Client Id"]: @Client!.Broker.ClientId</MudText>
                    </MudItem>
                    <MudItem xs="8">
                        <MudText Class="text-center">@_localizer["Keep Alive"]: @Client!.Broker.KeepAlive</MudText>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>

        <MudItem xs="7" Class="fit-content p-5">
            TODO: Simple console
        </MudItem>

        <MudItem xs="12">
            <MudList Class="p-0 w-100"
                     Dense="true" 
                     Clickable="true">

                <MudListSubheader>
                    <MudGrid Class="text-center">
                        <MudItem xs="1">

                        </MudItem>
                        <MudItem xs="2">
                            <MudText Typo="Typo.button">
                                @_localizer["Name"]
                            </MudText>
                        </MudItem>
                        <MudItem xs="4">
                            <MudText Typo="Typo.button">
                                @_localizer["Placing"]
                            </MudText>
                        </MudItem>
                        <MudItem xs="1">
                            <MudText Typo="Typo.button">
                                @_localizer["Port"]
                            </MudText>
                        </MudItem>
                        <MudItem xs="2">
                            <MudText Typo="Typo.button">
                                @_localizer["Status"]
                            </MudText>
                        </MudItem>
                        <MudItem> </MudItem>
                    </MudGrid>

                </MudListSubheader>

                <MudProgressLinear Size="Size.Small" Color="Color.Primary" Rounded="true" Value="100" />

                @foreach (var device in Client!.Devices)
                {
                    <MudListItem Class="d-flex align-items-center text-center"
                                 OnClick="() => NavigateToDevice(device)">
                       

                    </MudListItem>

                    <MudProgressLinear Size="Size.Small" Color="Color.Primary" Rounded="true" Value="0" />
                }
            </MudList>
        </MudItem>
    </MudGrid>
}


@code
{
    [Parameter] 
    public string BrokerId { get; set; } = string.Empty;
    public bool IsMobile { get; set; }
    private bool LoadedSuccessfully { get; set; } = false;
    private Client? Client { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (_loadingService.IsLoading)
            return;

        _loadingService.ShowLoading();

        IsMobile = false; //TODO: Uncoment = await _runtime.IsMobile();

        var result = await _clientService.GetClient(BrokerId);

        if (result.Succeeded)
        {
            Client = result.Data;
            Client!.RerenderPage += Rerender;
            LoadedSuccessfully = true;
        }

        if (result.ShowToast)
            foreach (var message in result.Messages)
                _snackbar.Add(message, result.Severity);


        _loadingService.HideLoading();
        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        Client!.RerenderPage -= Rerender;
    }

    private Task Rerender()
    {
        StateHasChanged();
        return Task.CompletedTask;
    }


    #region Devices Actions

    public void NavigateToDevice(Device device)
    {
        _navigationManager.NavigateTo($"/devices/{device.Id}/{BrokerId}");
    }

    #endregion
}
