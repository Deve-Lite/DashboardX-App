@page "/brokers"
@using Infrastructure;
@using Presentation.Models;
@using Presentation.Shared.Brokers;
@using Presentation.Utils;
@using global::Shared.Models.Brokers;

@inject IClientService _clientService


@if (_loadingService.IsLoading)
{

}
else if (!LoadedSuccessfully)
{
    <div>Loadin Failed...</div>
}
else
{
    <MudGrid Class="p-5">
        @foreach (var client in BrokerClients)
        {
            <MudItem>
                <MudCard Elevation="25" Class="container container-fit-content p-2" style="border-radius: 1rem; max-width: 25rem;">
                    <MudText Align="Align.Center"> @client.Broker.Name </MudText>
                    <MudText>Server: @client.Broker.Server </MudText>
                    <MudText>Port: @client.Broker.Port </MudText>
                    <MudText>Keep Alive: @client.Broker.KeepAlive </MudText>
                    <MudText Align="Align.End">Edited At: @client.Broker.EditedAt </MudText>
                </MudCard>
            </MudItem>
        }

        <MudItem>
            <MudCard Elevation="25" Class="container container-fit-content p-5" style="border-radius: 1rem;">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Class="container container-fit-content p-5"
                           Style="border-radius: 1rem; max-width 25rem;"
                           OnClick="OpenAddDialog">
                    Add new
                </MudButton>
            </MudCard>
        </MudItem>

    </MudGrid>
}


@code {

    public bool LoadedSuccessfully { get; set; } = true;
    private List<BrokerClient> BrokerClients { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (_loadingService.IsLoading)
            return;

        _loadingService.ShowLoading();

        var result = await _clientService.GetBrokers();
        LoadedSuccessfully = result.Succeeded;
        if (result.Succeeded)
        {
            BrokerClients = result.Data;
        }

        _loadingService.HideLoading();
    }

    private async Task OpenAddDialog()
    {
        if (_loadingService.IsLoading)
            return;

        var broker = new Broker()
        {
            Name="Default",
            Server="defaultserver",
            Port=8884,
            ClientId="defaultclient"
        };
        var parameters = new DialogParameters<UpsertBrokerDialog> { { x => x.Broker, broker } };

        var dialog = await _dialogService.ShowAsync<UpsertBrokerDialog>("Create Broker", parameters);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var x = result.Data as Result<BrokerClient> ?? Result<BrokerClient>.Fail("Couldn't parse response.");

        if(x.Succeeded)
        {
            BrokerClients.Add(x.Data);
            StateHasChanged();
        }
    }

    private Task OnAdded()
    {
        _snackbar.Add("Successfully Added", MudBlazor.Severity.Success, config => { config.ShowCloseIcon = false; });
        return Task.CompletedTask;
    }
}
