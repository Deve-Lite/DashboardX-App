@page "/brokers"
@using Infrastructure;
@using Presentation.Models;
@using Presentation.Shared.Brokers;
@using Presentation.Utils;
@using global::Shared.Models.Brokers;

@inject IClientService _clientService
@inject IStringLocalizer<BrokerListPage> _localizer

@if (_loadingService.IsLoading)
{
    <div> Loading... </div>
}
else if (!LoadedSuccessfully)
{
    <div>
        Failed to load... TODO: Refresh button
    </div>
}
else
{
    <MudGrid Class="p-5">
        @foreach (var client in Clients)
        {

            <MudItem>
                <MudCard Elevation="25" Class="container container-fit-content p-2" style="border-radius: 1rem; max-width: 25rem;">
                    <NavLink href="@($"brokers/{client.Broker.Id}")">
                        <MudText Align="Align.Center"> @client.Broker.Name </MudText>
                        <MudText >Server: @client.Broker.Server </MudText>
                        <MudText>Port: @client.Broker.Port </MudText>
                        <MudText>Keep Alive: @client.Broker.KeepAlive </MudText>
                        <MudText Align="Align.End">Edited At: @client.Broker.EditedAt </MudText>
                    </NavLink>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               Style="z-index: 10;"
                               OnClick="(() => RemoveBroker(client))">
                        Remove
                    </MudButton>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               Style="z-index: 10;"
                               OnClick="(() => UpdateBroker(client))">
                        Update
                    </MudButton>

                </MudCard>
            </MudItem>
        }

        <MudItem>
            <MudCard Elevation="25" Class="container container-fit-content p-5" style="border-radius: 1rem;">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Class="container container-fit-content p-5"
                           Style="border-radius: 1rem; max-width 25rem;"
                           OnClick="AddBroker">
                    Add new
                </MudButton>
            </MudCard>
        </MudItem>

    </MudGrid>
}


@code {

    public bool LoadedSuccessfully { get; set; } = true;
    private List<Client> Clients { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (_loadingService.IsLoading)
            return;

        _loadingService.ShowLoading();

        var result = await _clientService.GetClients();
        if (result.Succeeded)
        {
            Clients = result.Data;
            LoadedSuccessfully = true;
        }

        if (result.ShowToast)
            foreach (var message in result.Messages)
                _snackbar.Add(message, result.Severity);

        _loadingService.HideLoading();
    }

    private async Task UpdateBroker(Client client)
    {
        var parameters = new DialogParameters<UpsertBrokerDialog> { { x => x.Broker, client.Broker } };

        var dialog = await _dialogService.ShowAsync<UpsertBrokerDialog>("Edit Broker", parameters);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var x = result.Data as Result<Client> ?? Result<Client>.Fail(message:"Couldn't parse response.");

        if (x.Succeeded)
            StateHasChanged();
    }

    private async Task AddBroker()
    {
        var dialog = await _dialogService.ShowAsync<UpsertBrokerDialog>("Create Broker");
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var x = result.Data as Result<Client> ?? Result<Client>.Fail(message: "Couldn't parse response.");

        if (x.Succeeded)
            StateHasChanged();
    }

    private async Task RemoveBroker(Client client)
    {
        var parameters = new DialogParameters<RemoveBrokerDialog> { { x => x.Broker, client.Broker } };

        var dialog = await _dialogService.ShowAsync<RemoveBrokerDialog>("Remove Broker", parameters);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var x = result.Data as Result ?? Result.Fail(message: "Couldn't parse response.");

        if (x.Succeeded)
            StateHasChanged();
    }
}
