@page "/brokers"
@using Infrastructure;
@using Presentation.Models;
@using Presentation.Shared.Brokers;
@using Presentation.Utils;
@using global::Shared.Models.Brokers;

@inject IClientService _clientService
@inject IStringLocalizer<BrokerListPage> _localizer

@if (_loadingService.IsLoading)
{
    <div> Loading... </div>
}
else if (!LoadedSuccessfully)
{
    <div>
        Failed to load... TODO: Refresh button
    </div>
}
else if(IsMobile)
{
    //TODO: Implement
}
else
{
    <MudGrid Class="m-0 p-3 w-100">

        <MudItem xs="7">

            <!-- Todo Breadcrumb -->

        </MudItem>
        <MudItem xs="5" Class="d-flex justify-content-end">

            <MudButton OnClick="AddBroker"
                       Color="Color.Primary"
                       Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.AddToQueue">
                       @_localizer["Add Broker"]
            </MudButton>

        </MudItem>

        <MudItem Class="p-0" xs="12">
            <MudList Class="p-0" Dense="true" Clickable="true">
                <MudListSubheader Class="d-flex p-0 m-0">
                    <MudGrid Class="p-0 m-0">

                        <MudItem xs="1" Class="p-1 m-0">

                        </MudItem>

                        <MudItem xs="2" Class="d-flex p-1 m-0 align-items-center justify-content-start">
                            <MudText Typo="Typo.h6">
                                @_localizer["Name"]
                            </MudText>
                        </MudItem>
                        <MudItem xs="4" Class="d-flex p-1 m-0 align-items-center justify-content-start">
                            <MudText Typo="Typo.h6">
                                @_localizer["Server"]
                            </MudText>
                        </MudItem>
                        <MudItem xs="1" Class="d-flex p-1 m-0 align-items-center justify-content-start">
                            <MudText Typo="Typo.h6">
                                @_localizer["Port"]
                            </MudText>
                        </MudItem>
                        <MudItem xs="2" Class="d-flex p-1 m-0 align-items-center justify-content-center">
                            <MudText Typo="Typo.h6">
                                @_localizer["Status"]
                            </MudText>
                        </MudItem xs="2">
                        <MudItem Class="p-1 m-0"> </MudItem>
                    </MudGrid>

                </MudListSubheader>

                <MudProgressLinear Size="Size.Small" Color="Color.Primary" Rounded="true" Value="100" />

                @foreach(var client in Clients)
                {
                    <MudListItem Class="d-flex p-0 m-0"
                                 OnClick="() => NavigateToBroker(client)">
                        <MudGrid Class="p-0 m-0 w-100">
                            <MudItem xs="1" Class="d-flex m-0 p-1 pt-2 pb-2 align-items-center justify-content-center">
                                <MudIcon Class="p-0 m-0" Icon="@Icons.Material.Filled.Home">
                                    <!-- TODO Create icon recognition system -->
                                </MudIcon>
                            </MudItem>
                            <MudItem xs="2" Class="d-flex m-0 p-1 pt-2 pb-2 align-items-center justify-content-start">
                                <MudText >
                                    @client.Broker.Name
                                </MudText>
                            </MudItem>
                            <MudItem xs="4" Class="d-flex m-0 p-1 pt-2 pb-2 align-items-center justify-content-start">
                                <MudText Class="hide-overlapping-text">
                                    @client.Broker.Server
                                </MudText>
                            </MudItem>
                            <MudItem xs="1" Class="d-flex m-0 p-1 pt-2 pb-2 align-items-center justify-content-start">
                                <MudText>
                                    @client.Broker.Port
                                </MudText>
                            </MudItem>
                            <MudItem xs="2" Class="d-flex m-0 p-1 pt-2 pb-2 align-items-center justify-content-center">
                                @if (client.IsConnected)
                                {
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Success"
                                               OnClick="client.DisconnectAsync">
                                        @_localizer["Connected"]
                                    </MudButton>
                                }
                                else
                                {
                                    <MudButton Variant="Variant.Filled"
                                               OnClick="() => ConnectAsync(client)"
                                               Color="Color.Error">
                                        @_localizer["Disconnected"]
                                    </MudButton>
                                }
                            </MudItem>
                            <MudItem xs="2" Class="d-flex m-0 p-1 pt-2 pb-2 align-items-center justify-content-evenly">
                                <MudIconButton Class="z-10"
                                               Icon="@Icons.Material.Filled.Edit"
                                               OnClick="() => UpdateBroker(client)">

                                </MudIconButton>

                                <MudIconButton Class="z-10"
                                               Icon="@Icons.Material.Filled.Delete"
                                               OnClick="() => RemoveBroker(client)">

                                </MudIconButton>
                            </MudItem>
                        </MudGrid>

                    </MudListItem>

                    <MudProgressLinear Size="Size.Small" Color="Color.Primary" Rounded="true" Value="0"/>
                }
            </MudList>
        </MudItem>
    </MudGrid>
}

@code {

    public bool IsMobile { get; set; }
    public bool LoadedSuccessfully { get; set; } = true;
    private List<Client> Clients { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (_loadingService.IsLoading)
            return;

        _loadingService.ShowLoading();

        IsMobile = false; //TODO: Uncoment = await _runtime.IsMobile();

        var result = await _clientService.GetClients();
        if (result.Succeeded)
        {
            Clients = result.Data;
            LoadedSuccessfully = true;
        }

        if (result.ShowToast)
            foreach (var message in result.Messages)
                _snackbar.Add(message, result.Severity);

        _loadingService.HideLoading();
    }

    #region Table actions

    private async Task UpdateBroker(Client client)
    {
        var parameters = new DialogParameters<UpsertBrokerDialog> { { x => x.Broker, client.Broker } };

        var dialog = await _dialogService.ShowAsync<UpsertBrokerDialog>("Edit Broker", parameters);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var x = result.Data as Result<Client> ?? Result<Client>.Fail(message:"Couldn't parse response.");

        if (x.Succeeded)
            StateHasChanged();
    }

    private async Task AddBroker()
    {
        var dialog = await _dialogService.ShowAsync<UpsertBrokerDialog>("Create Broker");
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var x = result.Data as Result<Client> ?? Result<Client>.Fail(message: "Couldn't parse response.");

        if (x.Succeeded)
            StateHasChanged();
    }

    private async Task RemoveBroker(Client client)
    {
        var parameters = new DialogParameters<RemoveBrokerDialog> { { x => x.Broker, client.Broker } };

        var dialog = await _dialogService.ShowAsync<RemoveBrokerDialog>("Remove Broker", parameters);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var x = result.Data as Result ?? Result.Fail(message: "Couldn't parse response.");

        if (x.Succeeded)
            StateHasChanged();
    }

    private void NavigateToBroker(Client clinet)
    {
        _navigationManager.NavigateTo($"/brokers/{clinet.Id}");
    }

    private async Task ConnectAsync(Client client)
    {
        var result = await client.ConnectAsync();

        if (!result && result.ShowToast)
            _snackbar.Add(result.Messages.First(), Severity.Error);
    }

    #endregion
}
